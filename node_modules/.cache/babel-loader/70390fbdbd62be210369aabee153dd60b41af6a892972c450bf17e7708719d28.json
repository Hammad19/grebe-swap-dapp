{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\";\nexport const WRAPPED_SOL_MINT = new PublicKey(\"So11111111111111111111111111111111111111112\");\nlet TOKEN_PROGRAM_ID = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\nexport const SWAP_HOST_FEE_ADDRESS = process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS ? new PublicKey(`${process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS}`) : undefined;\nconst SWAP_PROGRAM_OWNER_FEE_ADDRESS = new PublicKey(\"SeCbhUgwfifKUVc3Ut5Z7hRCRMsPyFr1Z4hyargXYYv\");\nconsole.debug(`Host address: ${SWAP_HOST_FEE_ADDRESS === null || SWAP_HOST_FEE_ADDRESS === void 0 ? void 0 : SWAP_HOST_FEE_ADDRESS.toBase58()}`);\nconsole.debug(`Owner address: ${SWAP_PROGRAM_OWNER_FEE_ADDRESS === null || SWAP_PROGRAM_OWNER_FEE_ADDRESS === void 0 ? void 0 : SWAP_PROGRAM_OWNER_FEE_ADDRESS.toBase58()}`);\n\n// legacy pools are used to show users contributions in those pools to allow for withdrawals of funds\nconst PROGRAM_IDS = [{\n  name: \"mainnet-beta\",\n  swap: () => ({\n    current: new PublicKey(\"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\"),\n    legacy: []\n  })\n}, {\n  name: \"testnet\",\n  swap: () => ({\n    current: new PublicKey(\"2n2dsFSgmPcZ8jkmBZLGUM2nzuFqcBGQ3JEEj6RJJcEg\"),\n    legacy: [new PublicKey(\"9tdctNJuFsYZ6VrKfKEuwwbPp4SFdFw3jYBZU8QUtzeX\"), new PublicKey(\"CrRvVBS4Hmj47TPU3cMukurpmCUYUrdHYxTQBxncBGqw\")]\n  })\n}, {\n  name: \"devnet\",\n  swap: () => ({\n    current: new PublicKey(\"BSfTAcBdqmvX5iE2PW88WFNNp2DHhLUaBKk5WrnxVkcJ\"),\n    legacy: [new PublicKey(\"H1E1G7eD5Rrcy43xvDxXCsjkRggz7MWNMLGJ8YNzJ8PM\"), new PublicKey(\"CMoteLxSPVPoc7Drcggf3QPg3ue8WPpxYyZTg77UGqHo\"), new PublicKey(\"EEuPz4iZA5reBUeZj6x1VzoiHfYeHMppSCnHZasRFhYo\")]\n  })\n}, {\n  name: \"localnet\",\n  swap: () => ({\n    current: new PublicKey(\"5rdpyt5iGfr68qt28hkefcFyF4WtyhTwqKDmHSBG8GZx\"),\n    legacy: []\n  })\n}];\nlet SWAP_PROGRAM_ID;\nlet SWAP_PROGRAM_LEGACY_IDS;\nconst setProgramIds = envName => {\n  let instance = PROGRAM_IDS.find(env => env.name === envName);\n  if (!instance) {\n    return;\n  }\n  let swap = instance.swap();\n  SWAP_PROGRAM_ID = swap.current;\n  SWAP_PROGRAM_LEGACY_IDS = swap.legacy;\n};\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    swap: SWAP_PROGRAM_ID,\n    swap_legacy: SWAP_PROGRAM_LEGACY_IDS\n  };\n};","map":{"version":3,"names":["PublicKey","WRAPPED_SOL_MINT","TOKEN_PROGRAM_ID","SWAP_HOST_FEE_ADDRESS","process","env","REACT_APP_SWAP_HOST_FEE_ADDRESS","undefined","SWAP_PROGRAM_OWNER_FEE_ADDRESS","console","debug","toBase58","PROGRAM_IDS","name","swap","current","legacy","SWAP_PROGRAM_ID","SWAP_PROGRAM_LEGACY_IDS","setProgramIds","envName","instance","find","programIds","token","swap_legacy"],"sources":["C:/Users/dell/OneDrive/Desktop/Mudex-Latest/mudex/src/utils/ids.js"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\r\n\r\nexport const WRAPPED_SOL_MINT = new PublicKey(\r\n  \"So11111111111111111111111111111111111111112\"\r\n);\r\nlet TOKEN_PROGRAM_ID = new PublicKey(\r\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\r\n);\r\n\r\n\r\nexport const SWAP_HOST_FEE_ADDRESS = process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS\r\n  ? new PublicKey(`${process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS}`)\r\n  : undefined;\r\nconst SWAP_PROGRAM_OWNER_FEE_ADDRESS = new PublicKey(\r\n  \"SeCbhUgwfifKUVc3Ut5Z7hRCRMsPyFr1Z4hyargXYYv\"\r\n);\r\n\r\nconsole.debug(`Host address: ${SWAP_HOST_FEE_ADDRESS?.toBase58()}`);\r\nconsole.debug(`Owner address: ${SWAP_PROGRAM_OWNER_FEE_ADDRESS?.toBase58()}`);\r\n\r\n// legacy pools are used to show users contributions in those pools to allow for withdrawals of funds\r\nconst PROGRAM_IDS = [\r\n  {\r\n    name: \"mainnet-beta\",\r\n    swap: () => ({\r\n      current: new PublicKey(\"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\"),\r\n      legacy: [],\r\n    }),\r\n  },\r\n  {\r\n    name: \"testnet\",\r\n    swap: () => ({\r\n      current: new PublicKey(\"2n2dsFSgmPcZ8jkmBZLGUM2nzuFqcBGQ3JEEj6RJJcEg\"),\r\n      legacy: [\r\n        new PublicKey(\"9tdctNJuFsYZ6VrKfKEuwwbPp4SFdFw3jYBZU8QUtzeX\"),\r\n        new PublicKey(\"CrRvVBS4Hmj47TPU3cMukurpmCUYUrdHYxTQBxncBGqw\"),\r\n      ],\r\n    }),\r\n  },\r\n  {\r\n    name: \"devnet\",\r\n    swap: () => ({\r\n      current: new PublicKey(\"BSfTAcBdqmvX5iE2PW88WFNNp2DHhLUaBKk5WrnxVkcJ\"),\r\n      legacy: [\r\n        new PublicKey(\"H1E1G7eD5Rrcy43xvDxXCsjkRggz7MWNMLGJ8YNzJ8PM\"),\r\n        new PublicKey(\"CMoteLxSPVPoc7Drcggf3QPg3ue8WPpxYyZTg77UGqHo\"),\r\n        new PublicKey(\"EEuPz4iZA5reBUeZj6x1VzoiHfYeHMppSCnHZasRFhYo\"),\r\n      ],\r\n    }),\r\n  },\r\n  {\r\n    name: \"localnet\",\r\n    swap: () => ({\r\n      current: new PublicKey(\"5rdpyt5iGfr68qt28hkefcFyF4WtyhTwqKDmHSBG8GZx\"),\r\n      legacy: [],\r\n    }),\r\n  },\r\n];\r\nlet SWAP_PROGRAM_ID;\r\nlet SWAP_PROGRAM_LEGACY_IDS\r\nconst setProgramIds = (envName) => {\r\n  let instance = PROGRAM_IDS.find((env) => env.name === envName);\r\n  if (!instance) {\r\n    return;\r\n  }\r\n\r\n  let swap = instance.swap();\r\n\r\n  SWAP_PROGRAM_ID = swap.current;\r\n  SWAP_PROGRAM_LEGACY_IDS = swap.legacy;\r\n};\r\n\r\nexport const programIds = () => {\r\n  return {\r\n    token: TOKEN_PROGRAM_ID,\r\n    swap: SWAP_PROGRAM_ID,\r\n    swap_legacy: SWAP_PROGRAM_LEGACY_IDS,\r\n  };\r\n};\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAE3C,OAAO,MAAMC,gBAAgB,GAAG,IAAID,SAAS,CAC3C,6CAA6C,CAC9C;AACD,IAAIE,gBAAgB,GAAG,IAAIF,SAAS,CAClC,6CAA6C,CAC9C;AAGD,OAAO,MAAMG,qBAAqB,GAAGC,OAAO,CAACC,GAAG,CAACC,+BAA+B,GAC5E,IAAIN,SAAS,CAAE,GAAEI,OAAO,CAACC,GAAG,CAACC,+BAAgC,EAAC,CAAC,GAC/DC,SAAS;AACb,MAAMC,8BAA8B,GAAG,IAAIR,SAAS,CAClD,6CAA6C,CAC9C;AAEDS,OAAO,CAACC,KAAK,CAAE,iBAAgBP,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEQ,QAAQ,EAAG,EAAC,CAAC;AACnEF,OAAO,CAACC,KAAK,CAAE,kBAAiBF,8BAA8B,aAA9BA,8BAA8B,uBAA9BA,8BAA8B,CAAEG,QAAQ,EAAG,EAAC,CAAC;;AAE7E;AACA,MAAMC,WAAW,GAAG,CAClB;EACEC,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAEA,CAAA,MAAO;IACXC,OAAO,EAAE,IAAIf,SAAS,CAAC,8CAA8C,CAAC;IACtEgB,MAAM,EAAE;EACV,CAAC;AACH,CAAC,EACD;EACEH,IAAI,EAAE,SAAS;EACfC,IAAI,EAAEA,CAAA,MAAO;IACXC,OAAO,EAAE,IAAIf,SAAS,CAAC,8CAA8C,CAAC;IACtEgB,MAAM,EAAE,CACN,IAAIhB,SAAS,CAAC,8CAA8C,CAAC,EAC7D,IAAIA,SAAS,CAAC,8CAA8C,CAAC;EAEjE,CAAC;AACH,CAAC,EACD;EACEa,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAEA,CAAA,MAAO;IACXC,OAAO,EAAE,IAAIf,SAAS,CAAC,8CAA8C,CAAC;IACtEgB,MAAM,EAAE,CACN,IAAIhB,SAAS,CAAC,8CAA8C,CAAC,EAC7D,IAAIA,SAAS,CAAC,8CAA8C,CAAC,EAC7D,IAAIA,SAAS,CAAC,8CAA8C,CAAC;EAEjE,CAAC;AACH,CAAC,EACD;EACEa,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAEA,CAAA,MAAO;IACXC,OAAO,EAAE,IAAIf,SAAS,CAAC,8CAA8C,CAAC;IACtEgB,MAAM,EAAE;EACV,CAAC;AACH,CAAC,CACF;AACD,IAAIC,eAAe;AACnB,IAAIC,uBAAuB;AAC3B,MAAMC,aAAa,GAAIC,OAAO,IAAK;EACjC,IAAIC,QAAQ,GAAGT,WAAW,CAACU,IAAI,CAAEjB,GAAG,IAAKA,GAAG,CAACQ,IAAI,KAAKO,OAAO,CAAC;EAC9D,IAAI,CAACC,QAAQ,EAAE;IACb;EACF;EAEA,IAAIP,IAAI,GAAGO,QAAQ,CAACP,IAAI,EAAE;EAE1BG,eAAe,GAAGH,IAAI,CAACC,OAAO;EAC9BG,uBAAuB,GAAGJ,IAAI,CAACE,MAAM;AACvC,CAAC;AAED,OAAO,MAAMO,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAO;IACLC,KAAK,EAAEtB,gBAAgB;IACvBY,IAAI,EAAEG,eAAe;IACrBQ,WAAW,EAAEP;EACf,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}