{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenSwap = exports.CurveType = exports.TokenSwapLayout = exports.Numberu64 = exports.OLD_TOKEN_SWAP_PROGRAM_ID = exports.TOKEN_SWAP_PROGRAM_ID = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_1 = require(\"buffer\");\nconst BufferLayout = __importStar(require(\"@solana/buffer-layout\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst Layout = __importStar(require(\"./layout\"));\nconst account_1 = require(\"./util/account\");\nexports.TOKEN_SWAP_PROGRAM_ID = new web3_js_1.PublicKey('SwapsVeCiPHMUAtzQWZw7RjsKjgCjhwU55QGu4U1Szw');\nexports.OLD_TOKEN_SWAP_PROGRAM_ID = new web3_js_1.PublicKey('SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8');\n/**\n * Some amount of tokens\n */\nclass Numberu64 extends bn_js_1.default {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer() {\n    const a = super.toArray().reverse();\n    const b = buffer_1.Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    (0, assert_1.default)(b.length < 8, 'Numberu64 too large');\n    const zeroPad = buffer_1.Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n  /**\n   * Construct a Numberu64 from Buffer representation\n   */\n  static fromBuffer(buffer) {\n    (0, assert_1.default)(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new Numberu64([...buffer].reverse().map(i => `00${i.toString(16)}`.slice(-2)).join(''), 16);\n  }\n}\nexports.Numberu64 = Numberu64;\nexports.TokenSwapLayout = BufferLayout.struct([BufferLayout.u8('version'), BufferLayout.u8('isInitialized'), BufferLayout.u8('bumpSeed'), Layout.publicKey('poolTokenProgramId'), Layout.publicKey('tokenAccountA'), Layout.publicKey('tokenAccountB'), Layout.publicKey('tokenPool'), Layout.publicKey('mintA'), Layout.publicKey('mintB'), Layout.publicKey('feeAccount'), Layout.uint64('tradeFeeNumerator'), Layout.uint64('tradeFeeDenominator'), Layout.uint64('ownerTradeFeeNumerator'), Layout.uint64('ownerTradeFeeDenominator'), Layout.uint64('ownerWithdrawFeeNumerator'), Layout.uint64('ownerWithdrawFeeDenominator'), Layout.uint64('hostFeeNumerator'), Layout.uint64('hostFeeDenominator'), BufferLayout.u8('curveType'), BufferLayout.blob(32, 'curveParameters')]);\nexports.CurveType = Object.freeze({\n  ConstantProduct: 0,\n  ConstantPrice: 1,\n  Offset: 3 // Offset curve, like Uniswap, but with an additional offset on the token B side\n});\n/**\n * A program to exchange tokens against a pool of liquidity\n */\nclass TokenSwap {\n  connection;\n  tokenSwap;\n  swapProgramId;\n  poolTokenProgramId;\n  poolToken;\n  feeAccount;\n  authority;\n  tokenAccountA;\n  tokenAccountB;\n  mintA;\n  mintB;\n  tradeFeeNumerator;\n  tradeFeeDenominator;\n  ownerTradeFeeNumerator;\n  ownerTradeFeeDenominator;\n  ownerWithdrawFeeNumerator;\n  ownerWithdrawFeeDenominator;\n  hostFeeNumerator;\n  hostFeeDenominator;\n  curveType;\n  payer;\n  /**\n   * Create a Token object attached to the specific token\n   *\n   * @param connection The connection to use\n   * @param tokenSwap The token swap account\n   * @param swapProgramId The program ID of the token-swap program\n   * @param poolTokenProgramId The program ID of the token program for the pool tokens\n   * @param poolToken The pool token\n   * @param authority The authority over the swap and accounts\n   * @param tokenAccountA The token swap's Token A account\n   * @param tokenAccountB The token swap's Token B account\n   * @param mintA The mint of Token A\n   * @param mintB The mint of Token B\n   * @param tradeFeeNumerator The trade fee numerator\n   * @param tradeFeeDenominator The trade fee denominator\n   * @param ownerTradeFeeNumerator The owner trade fee numerator\n   * @param ownerTradeFeeDenominator The owner trade fee denominator\n   * @param ownerWithdrawFeeNumerator The owner withdraw fee numerator\n   * @param ownerWithdrawFeeDenominator The owner withdraw fee denominator\n   * @param hostFeeNumerator The host fee numerator\n   * @param hostFeeDenominator The host fee denominator\n   * @param curveType The curve type\n   * @param payer Pays for the transaction\n   */\n  constructor(connection, tokenSwap, swapProgramId, poolTokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, payer) {\n    this.connection = connection;\n    this.tokenSwap = tokenSwap;\n    this.swapProgramId = swapProgramId;\n    this.poolTokenProgramId = poolTokenProgramId;\n    this.poolToken = poolToken;\n    this.feeAccount = feeAccount;\n    this.authority = authority;\n    this.tokenAccountA = tokenAccountA;\n    this.tokenAccountB = tokenAccountB;\n    this.mintA = mintA;\n    this.mintB = mintB;\n    this.tradeFeeNumerator = tradeFeeNumerator;\n    this.tradeFeeDenominator = tradeFeeDenominator;\n    this.ownerTradeFeeNumerator = ownerTradeFeeNumerator;\n    this.ownerTradeFeeDenominator = ownerTradeFeeDenominator;\n    this.ownerWithdrawFeeNumerator = ownerWithdrawFeeNumerator;\n    this.ownerWithdrawFeeDenominator = ownerWithdrawFeeDenominator;\n    this.hostFeeNumerator = hostFeeNumerator;\n    this.hostFeeDenominator = hostFeeDenominator;\n    this.curveType = curveType;\n    this.payer = payer;\n    this.connection = connection;\n    this.tokenSwap = tokenSwap;\n    this.swapProgramId = swapProgramId;\n    this.poolTokenProgramId = poolTokenProgramId;\n    this.poolToken = poolToken;\n    this.feeAccount = feeAccount;\n    this.authority = authority;\n    this.tokenAccountA = tokenAccountA;\n    this.tokenAccountB = tokenAccountB;\n    this.mintA = mintA;\n    this.mintB = mintB;\n    this.tradeFeeNumerator = tradeFeeNumerator;\n    this.tradeFeeDenominator = tradeFeeDenominator;\n    this.ownerTradeFeeNumerator = ownerTradeFeeNumerator;\n    this.ownerTradeFeeDenominator = ownerTradeFeeDenominator;\n    this.ownerWithdrawFeeNumerator = ownerWithdrawFeeNumerator;\n    this.ownerWithdrawFeeDenominator = ownerWithdrawFeeDenominator;\n    this.hostFeeNumerator = hostFeeNumerator;\n    this.hostFeeDenominator = hostFeeDenominator;\n    this.curveType = curveType;\n    this.payer = payer;\n  }\n  /**\n   * Get the minimum balance for the token swap account to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptTokenSwap(connection) {\n    return await connection.getMinimumBalanceForRentExemption(exports.TokenSwapLayout.span);\n  }\n  static createInitSwapInstruction(tokenSwapAccount, authority, tokenAccountA, tokenAccountB, tokenPool, feeAccount, tokenAccountPool, poolTokenProgramId, swapProgramId, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType) {\n    let curveParameters = arguments.length > 18 && arguments[18] !== undefined ? arguments[18] : new Numberu64(0);\n    const keys = [{\n      pubkey: tokenSwapAccount.publicKey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenAccountA,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenAccountB,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenPool,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenAccountPool,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolTokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n    const commandDataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.nu64('tradeFeeNumerator'), BufferLayout.nu64('tradeFeeDenominator'), BufferLayout.nu64('ownerTradeFeeNumerator'), BufferLayout.nu64('ownerTradeFeeDenominator'), BufferLayout.nu64('ownerWithdrawFeeNumerator'), BufferLayout.nu64('ownerWithdrawFeeDenominator'), BufferLayout.nu64('hostFeeNumerator'), BufferLayout.nu64('hostFeeDenominator'), BufferLayout.u8('curveType'), BufferLayout.blob(32, 'curveParameters')]);\n    let data = buffer_1.Buffer.alloc(1024);\n    // package curve parameters\n    // NOTE: currently assume all curves take a single parameter, u64 int\n    //       the remaining 24 of the 32 bytes available are filled with 0s\n    let curveParamsBuffer = buffer_1.Buffer.alloc(32);\n    curveParameters.toBuffer().copy(curveParamsBuffer);\n    {\n      const encodeLength = commandDataLayout.encode({\n        instruction: 0,\n        tradeFeeNumerator,\n        tradeFeeDenominator,\n        ownerTradeFeeNumerator,\n        ownerTradeFeeDenominator,\n        ownerWithdrawFeeNumerator,\n        ownerWithdrawFeeDenominator,\n        hostFeeNumerator,\n        hostFeeDenominator,\n        curveType,\n        curveParameters: curveParamsBuffer\n      }, data);\n      data = data.slice(0, encodeLength);\n    }\n    return new web3_js_1.TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data\n    });\n  }\n  static async loadTokenSwap(connection, address, programId, payer) {\n    const data = await (0, account_1.loadAccount)(connection, address, programId);\n    const tokenSwapData = exports.TokenSwapLayout.decode(data);\n    if (!tokenSwapData.isInitialized) {\n      throw new Error(`Invalid token swap state`);\n    }\n    const [authority] = await web3_js_1.PublicKey.findProgramAddress([address.toBuffer()], programId);\n    const poolToken = new web3_js_1.PublicKey(tokenSwapData.tokenPool);\n    const feeAccount = new web3_js_1.PublicKey(tokenSwapData.feeAccount);\n    const tokenAccountA = new web3_js_1.PublicKey(tokenSwapData.tokenAccountA);\n    const tokenAccountB = new web3_js_1.PublicKey(tokenSwapData.tokenAccountB);\n    const mintA = new web3_js_1.PublicKey(tokenSwapData.mintA);\n    const mintB = new web3_js_1.PublicKey(tokenSwapData.mintB);\n    const poolTokenProgramId = new web3_js_1.PublicKey(tokenSwapData.poolTokenProgramId);\n    const tradeFeeNumerator = Numberu64.fromBuffer(tokenSwapData.tradeFeeNumerator);\n    const tradeFeeDenominator = Numberu64.fromBuffer(tokenSwapData.tradeFeeDenominator);\n    const ownerTradeFeeNumerator = Numberu64.fromBuffer(tokenSwapData.ownerTradeFeeNumerator);\n    const ownerTradeFeeDenominator = Numberu64.fromBuffer(tokenSwapData.ownerTradeFeeDenominator);\n    const ownerWithdrawFeeNumerator = Numberu64.fromBuffer(tokenSwapData.ownerWithdrawFeeNumerator);\n    const ownerWithdrawFeeDenominator = Numberu64.fromBuffer(tokenSwapData.ownerWithdrawFeeDenominator);\n    const hostFeeNumerator = Numberu64.fromBuffer(tokenSwapData.hostFeeNumerator);\n    const hostFeeDenominator = Numberu64.fromBuffer(tokenSwapData.hostFeeDenominator);\n    const curveType = tokenSwapData.curveType;\n    return new TokenSwap(connection, address, programId, poolTokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, payer);\n  }\n  /**\n   * Create a new Token Swap\n   *\n   * @param connection The connection to use\n   * @param payer Pays for the transaction\n   * @param tokenSwapAccount The token swap account\n   * @param authority The authority over the swap and accounts\n   * @param tokenAccountA: The token swap's Token A account\n   * @param tokenAccountB: The token swap's Token B account\n   * @param poolToken The pool token\n   * @param tokenAccountPool The token swap's pool token account\n   * @param poolTokenProgramId The program ID of the token program for pool tokens\n   * @param swapProgramId The program ID of the token-swap program\n   * @param feeNumerator Numerator of the fee ratio\n   * @param feeDenominator Denominator of the fee ratio\n   * @return Token object for the newly minted token, Public key of the account holding the total supply of new tokens\n   */\n  static async createTokenSwap(connection, payer, tokenSwapAccount, authority, tokenAccountA, tokenAccountB, poolToken, mintA, mintB, feeAccount, tokenAccountPool, swapProgramId, poolTokenProgramId, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, curveParameters, confirmOptions) {\n    let transaction;\n    const tokenSwap = new TokenSwap(connection, tokenSwapAccount.publicKey, swapProgramId, poolTokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, new Numberu64(tradeFeeNumerator), new Numberu64(tradeFeeDenominator), new Numberu64(ownerTradeFeeNumerator), new Numberu64(ownerTradeFeeDenominator), new Numberu64(ownerWithdrawFeeNumerator), new Numberu64(ownerWithdrawFeeDenominator), new Numberu64(hostFeeNumerator), new Numberu64(hostFeeDenominator), curveType, payer);\n    // Allocate memory for the account\n    const balanceNeeded = await TokenSwap.getMinBalanceRentForExemptTokenSwap(connection);\n    transaction = new web3_js_1.Transaction();\n    transaction.add(web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: tokenSwapAccount.publicKey,\n      lamports: balanceNeeded,\n      space: exports.TokenSwapLayout.span,\n      programId: swapProgramId\n    }));\n    const instruction = TokenSwap.createInitSwapInstruction(tokenSwapAccount, authority, tokenAccountA, tokenAccountB, poolToken, feeAccount, tokenAccountPool, poolTokenProgramId, swapProgramId, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, curveParameters);\n    transaction.add(instruction);\n    await (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, tokenSwapAccount], confirmOptions);\n    return tokenSwap;\n  }\n  /**\n   * Swap token A for token B\n   *\n   * @param userSource User's source token account\n   * @param poolSource Pool's source token account\n   * @param poolDestination Pool's destination token account\n   * @param userDestination User's destination token account\n   * @param sourceTokenProgramId Program id for the source token\n   * @param destinationTokenProgramId Program id for the destination token\n   * @param hostFeeAccount Host account to gather fees\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param amountIn Amount to transfer from source account\n   * @param minimumAmountOut Minimum amount of tokens the user will receive\n   */\n  async swap(userSource, poolSource, poolDestination, userDestination, sourceTokenProgramId, destinationTokenProgramId, hostFeeAccount, userTransferAuthority, amountIn, minimumAmountOut, confirmOptions) {\n    return await (0, web3_js_1.sendAndConfirmTransaction)(this.connection, new web3_js_1.Transaction().add(TokenSwap.swapInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userSource, poolSource, poolDestination, userDestination, this.poolToken, this.feeAccount, hostFeeAccount, this.swapProgramId, sourceTokenProgramId, destinationTokenProgramId, this.poolTokenProgramId, amountIn, minimumAmountOut)), [this.payer, userTransferAuthority], confirmOptions);\n  }\n  static swapInstruction(tokenSwap, authority, userTransferAuthority, userSource, poolSource, poolDestination, userDestination, poolMint, feeAccount, hostFeeAccount, swapProgramId, sourceTokenProgramId, destinationTokenProgramId, poolTokenProgramId, amountIn, minimumAmountOut) {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), Layout.uint64('amountIn'), Layout.uint64('minimumAmountOut')]);\n    const data = buffer_1.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 1,\n      amountIn: new Numberu64(amountIn).toBuffer(),\n      minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer()\n    }, data);\n    const keys = [{\n      pubkey: tokenSwap,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: userTransferAuthority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: userSource,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolSource,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolDestination,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userDestination,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolMint,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: sourceTokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: destinationTokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: poolTokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (hostFeeAccount !== null) {\n      keys.push({\n        pubkey: hostFeeAccount,\n        isSigner: false,\n        isWritable: true\n      });\n    }\n    return new web3_js_1.TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data\n    });\n  }\n  /**\n   * Deposit tokens into the pool\n   * @param userAccountA User account for token A\n   * @param userAccountB User account for token B\n   * @param poolAccount User account for pool token\n   * @param tokenProgramIdA Program id for token A\n   * @param tokenProgramIdB Program id for token B\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param poolTokenAmount Amount of pool tokens to mint\n   * @param maximumTokenA The maximum amount of token A to deposit\n   * @param maximumTokenB The maximum amount of token B to deposit\n   */\n  async depositAllTokenTypes(userAccountA, userAccountB, poolAccount, tokenProgramIdA, tokenProgramIdB, userTransferAuthority, poolTokenAmount, maximumTokenA, maximumTokenB, confirmOptions) {\n    return await (0, web3_js_1.sendAndConfirmTransaction)(this.connection, new web3_js_1.Transaction().add(TokenSwap.depositAllTokenTypesInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userAccountA, userAccountB, this.tokenAccountA, this.tokenAccountB, this.poolToken, poolAccount, this.swapProgramId, tokenProgramIdA, tokenProgramIdB, this.poolTokenProgramId, poolTokenAmount, maximumTokenA, maximumTokenB)), [this.payer, userTransferAuthority], confirmOptions);\n  }\n  static depositAllTokenTypesInstruction(tokenSwap, authority, userTransferAuthority, sourceA, sourceB, intoA, intoB, poolToken, poolAccount, swapProgramId, tokenProgramIdA, tokenProgramIdB, poolTokenProgramId, poolTokenAmount, maximumTokenA, maximumTokenB) {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), Layout.uint64('poolTokenAmount'), Layout.uint64('maximumTokenA'), Layout.uint64('maximumTokenB')]);\n    const data = buffer_1.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 2,\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n      maximumTokenB: new Numberu64(maximumTokenB).toBuffer()\n    }, data);\n    const keys = [{\n      pubkey: tokenSwap,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: userTransferAuthority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: sourceA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: sourceB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: intoA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: intoB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolToken,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: tokenProgramIdA,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenProgramIdB,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: poolTokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new web3_js_1.TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data\n    });\n  }\n  /**\n   * Withdraw tokens from the pool\n   *\n   * @param userAccountA User account for token A\n   * @param userAccountB User account for token B\n   * @param poolAccount User account for pool token\n   * @param tokenProgramIdA Program id for token A\n   * @param tokenProgramIdB Program id for token B\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param poolTokenAmount Amount of pool tokens to burn\n   * @param minimumTokenA The minimum amount of token A to withdraw\n   * @param minimumTokenB The minimum amount of token B to withdraw\n   */\n  async withdrawAllTokenTypes(userAccountA, userAccountB, poolAccount, tokenProgramIdA, tokenProgramIdB, userTransferAuthority, poolTokenAmount, minimumTokenA, minimumTokenB, confirmOptions) {\n    return await (0, web3_js_1.sendAndConfirmTransaction)(this.connection, new web3_js_1.Transaction().add(TokenSwap.withdrawAllTokenTypesInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, this.poolToken, this.feeAccount, poolAccount, this.tokenAccountA, this.tokenAccountB, userAccountA, userAccountB, this.swapProgramId, this.poolTokenProgramId, tokenProgramIdA, tokenProgramIdB, poolTokenAmount, minimumTokenA, minimumTokenB)), [this.payer, userTransferAuthority], confirmOptions);\n  }\n  static withdrawAllTokenTypesInstruction(tokenSwap, authority, userTransferAuthority, poolMint, feeAccount, sourcePoolAccount, fromA, fromB, userAccountA, userAccountB, swapProgramId, poolTokenProgramId, tokenProgramIdA, tokenProgramIdB, poolTokenAmount, minimumTokenA, minimumTokenB) {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), Layout.uint64('poolTokenAmount'), Layout.uint64('minimumTokenA'), Layout.uint64('minimumTokenB')]);\n    const data = buffer_1.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 3,\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n      minimumTokenB: new Numberu64(minimumTokenB).toBuffer()\n    }, data);\n    const keys = [{\n      pubkey: tokenSwap,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: userTransferAuthority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: poolMint,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: sourcePoolAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fromA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fromB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userAccountA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userAccountB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolTokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenProgramIdA,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: tokenProgramIdB,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new web3_js_1.TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data\n    });\n  }\n  /**\n   * Deposit one side of tokens into the pool\n   * @param userAccount User account to deposit token A or B\n   * @param poolAccount User account to receive pool tokens\n   * @param sourceTokenProgramId Program id for the source token\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param sourceTokenAmount The amount of token A or B to deposit\n   * @param minimumPoolTokenAmount Minimum amount of pool tokens to mint\n   */\n  async depositSingleTokenTypeExactAmountIn(userAccount, poolAccount, sourceTokenProgramId, userTransferAuthority, sourceTokenAmount, minimumPoolTokenAmount, confirmOptions) {\n    return await (0, web3_js_1.sendAndConfirmTransaction)(this.connection, new web3_js_1.Transaction().add(TokenSwap.depositSingleTokenTypeExactAmountInInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userAccount, this.tokenAccountA, this.tokenAccountB, this.poolToken, poolAccount, this.swapProgramId, sourceTokenProgramId, this.poolTokenProgramId, sourceTokenAmount, minimumPoolTokenAmount)), [this.payer, userTransferAuthority], confirmOptions);\n  }\n  static depositSingleTokenTypeExactAmountInInstruction(tokenSwap, authority, userTransferAuthority, source, intoA, intoB, poolToken, poolAccount, swapProgramId, sourceTokenProgramId, poolTokenProgramId, sourceTokenAmount, minimumPoolTokenAmount) {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), Layout.uint64('sourceTokenAmount'), Layout.uint64('minimumPoolTokenAmount')]);\n    const data = buffer_1.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 4,\n      sourceTokenAmount: new Numberu64(sourceTokenAmount).toBuffer(),\n      minimumPoolTokenAmount: new Numberu64(minimumPoolTokenAmount).toBuffer()\n    }, data);\n    const keys = [{\n      pubkey: tokenSwap,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: userTransferAuthority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: source,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: intoA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: intoB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolToken,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: sourceTokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: poolTokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new web3_js_1.TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data\n    });\n  }\n  /**\n   * Withdraw tokens from the pool\n   *\n   * @param userAccount User account to receive token A or B\n   * @param poolAccount User account to burn pool token\n   * @param destinationTokenProgramId Program id for the destination token\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param destinationTokenAmount The amount of token A or B to withdraw\n   * @param maximumPoolTokenAmount Maximum amount of pool tokens to burn\n   */\n  async withdrawSingleTokenTypeExactAmountOut(userAccount, poolAccount, destinationTokenProgramId, userTransferAuthority, destinationTokenAmount, maximumPoolTokenAmount, confirmOptions) {\n    return await (0, web3_js_1.sendAndConfirmTransaction)(this.connection, new web3_js_1.Transaction().add(TokenSwap.withdrawSingleTokenTypeExactAmountOutInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, this.poolToken, this.feeAccount, poolAccount, this.tokenAccountA, this.tokenAccountB, userAccount, this.swapProgramId, this.poolTokenProgramId, destinationTokenProgramId, destinationTokenAmount, maximumPoolTokenAmount)), [this.payer, userTransferAuthority], confirmOptions);\n  }\n  static withdrawSingleTokenTypeExactAmountOutInstruction(tokenSwap, authority, userTransferAuthority, poolMint, feeAccount, sourcePoolAccount, fromA, fromB, userAccount, swapProgramId, poolTokenProgramId, destinationTokenProgramId, destinationTokenAmount, maximumPoolTokenAmount) {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction'), Layout.uint64('destinationTokenAmount'), Layout.uint64('maximumPoolTokenAmount')]);\n    const data = buffer_1.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 5,\n      destinationTokenAmount: new Numberu64(destinationTokenAmount).toBuffer(),\n      maximumPoolTokenAmount: new Numberu64(maximumPoolTokenAmount).toBuffer()\n    }, data);\n    const keys = [{\n      pubkey: tokenSwap,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authority,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: userTransferAuthority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: poolMint,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: sourcePoolAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fromA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fromB,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolTokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: destinationTokenProgramId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new web3_js_1.TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data\n    });\n  }\n}\nexports.TokenSwap = TokenSwap;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","TokenSwap","CurveType","TokenSwapLayout","Numberu64","OLD_TOKEN_SWAP_PROGRAM_ID","TOKEN_SWAP_PROGRAM_ID","assert_1","require","bn_js_1","buffer_1","BufferLayout","web3_js_1","Layout","account_1","PublicKey","default","toBuffer","a","toArray","reverse","b","Buffer","from","length","zeroPad","alloc","copy","fromBuffer","buffer","map","i","toString","slice","join","struct","u8","publicKey","uint64","blob","freeze","ConstantProduct","ConstantPrice","Offset","connection","tokenSwap","swapProgramId","poolTokenProgramId","poolToken","feeAccount","authority","tokenAccountA","tokenAccountB","mintA","mintB","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","hostFeeNumerator","hostFeeDenominator","curveType","payer","constructor","getMinBalanceRentForExemptTokenSwap","getMinimumBalanceForRentExemption","span","createInitSwapInstruction","tokenSwapAccount","tokenPool","tokenAccountPool","curveParameters","arguments","keys","pubkey","isSigner","isWritable","commandDataLayout","nu64","data","curveParamsBuffer","encodeLength","encode","instruction","TransactionInstruction","programId","loadTokenSwap","address","loadAccount","tokenSwapData","decode","isInitialized","Error","findProgramAddress","createTokenSwap","confirmOptions","transaction","balanceNeeded","Transaction","add","SystemProgram","createAccount","fromPubkey","newAccountPubkey","lamports","space","sendAndConfirmTransaction","swap","userSource","poolSource","poolDestination","userDestination","sourceTokenProgramId","destinationTokenProgramId","hostFeeAccount","userTransferAuthority","amountIn","minimumAmountOut","swapInstruction","poolMint","dataLayout","push","depositAllTokenTypes","userAccountA","userAccountB","poolAccount","tokenProgramIdA","tokenProgramIdB","poolTokenAmount","maximumTokenA","maximumTokenB","depositAllTokenTypesInstruction","sourceA","sourceB","intoA","intoB","withdrawAllTokenTypes","minimumTokenA","minimumTokenB","withdrawAllTokenTypesInstruction","sourcePoolAccount","fromA","fromB","depositSingleTokenTypeExactAmountIn","userAccount","sourceTokenAmount","minimumPoolTokenAmount","depositSingleTokenTypeExactAmountInInstruction","source","withdrawSingleTokenTypeExactAmountOut","destinationTokenAmount","maximumPoolTokenAmount","withdrawSingleTokenTypeExactAmountOutInstruction"],"sources":["C:/Users/dell/OneDrive/Desktop/Mudex-Latest/mudex/node_modules/@solana/spl-token-swap/dist/esm/index.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenSwap = exports.CurveType = exports.TokenSwapLayout = exports.Numberu64 = exports.OLD_TOKEN_SWAP_PROGRAM_ID = exports.TOKEN_SWAP_PROGRAM_ID = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_1 = require(\"buffer\");\nconst BufferLayout = __importStar(require(\"@solana/buffer-layout\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst Layout = __importStar(require(\"./layout\"));\nconst account_1 = require(\"./util/account\");\nexports.TOKEN_SWAP_PROGRAM_ID = new web3_js_1.PublicKey('SwapsVeCiPHMUAtzQWZw7RjsKjgCjhwU55QGu4U1Szw');\nexports.OLD_TOKEN_SWAP_PROGRAM_ID = new web3_js_1.PublicKey('SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8');\n/**\n * Some amount of tokens\n */\nclass Numberu64 extends bn_js_1.default {\n    /**\n     * Convert to Buffer representation\n     */\n    toBuffer() {\n        const a = super.toArray().reverse();\n        const b = buffer_1.Buffer.from(a);\n        if (b.length === 8) {\n            return b;\n        }\n        (0, assert_1.default)(b.length < 8, 'Numberu64 too large');\n        const zeroPad = buffer_1.Buffer.alloc(8);\n        b.copy(zeroPad);\n        return zeroPad;\n    }\n    /**\n     * Construct a Numberu64 from Buffer representation\n     */\n    static fromBuffer(buffer) {\n        (0, assert_1.default)(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n        return new Numberu64([...buffer]\n            .reverse()\n            .map(i => `00${i.toString(16)}`.slice(-2))\n            .join(''), 16);\n    }\n}\nexports.Numberu64 = Numberu64;\nexports.TokenSwapLayout = BufferLayout.struct([\n    BufferLayout.u8('version'),\n    BufferLayout.u8('isInitialized'),\n    BufferLayout.u8('bumpSeed'),\n    Layout.publicKey('poolTokenProgramId'),\n    Layout.publicKey('tokenAccountA'),\n    Layout.publicKey('tokenAccountB'),\n    Layout.publicKey('tokenPool'),\n    Layout.publicKey('mintA'),\n    Layout.publicKey('mintB'),\n    Layout.publicKey('feeAccount'),\n    Layout.uint64('tradeFeeNumerator'),\n    Layout.uint64('tradeFeeDenominator'),\n    Layout.uint64('ownerTradeFeeNumerator'),\n    Layout.uint64('ownerTradeFeeDenominator'),\n    Layout.uint64('ownerWithdrawFeeNumerator'),\n    Layout.uint64('ownerWithdrawFeeDenominator'),\n    Layout.uint64('hostFeeNumerator'),\n    Layout.uint64('hostFeeDenominator'),\n    BufferLayout.u8('curveType'),\n    BufferLayout.blob(32, 'curveParameters'),\n]);\nexports.CurveType = Object.freeze({\n    ConstantProduct: 0,\n    ConstantPrice: 1,\n    Offset: 3, // Offset curve, like Uniswap, but with an additional offset on the token B side\n});\n/**\n * A program to exchange tokens against a pool of liquidity\n */\nclass TokenSwap {\n    connection;\n    tokenSwap;\n    swapProgramId;\n    poolTokenProgramId;\n    poolToken;\n    feeAccount;\n    authority;\n    tokenAccountA;\n    tokenAccountB;\n    mintA;\n    mintB;\n    tradeFeeNumerator;\n    tradeFeeDenominator;\n    ownerTradeFeeNumerator;\n    ownerTradeFeeDenominator;\n    ownerWithdrawFeeNumerator;\n    ownerWithdrawFeeDenominator;\n    hostFeeNumerator;\n    hostFeeDenominator;\n    curveType;\n    payer;\n    /**\n     * Create a Token object attached to the specific token\n     *\n     * @param connection The connection to use\n     * @param tokenSwap The token swap account\n     * @param swapProgramId The program ID of the token-swap program\n     * @param poolTokenProgramId The program ID of the token program for the pool tokens\n     * @param poolToken The pool token\n     * @param authority The authority over the swap and accounts\n     * @param tokenAccountA The token swap's Token A account\n     * @param tokenAccountB The token swap's Token B account\n     * @param mintA The mint of Token A\n     * @param mintB The mint of Token B\n     * @param tradeFeeNumerator The trade fee numerator\n     * @param tradeFeeDenominator The trade fee denominator\n     * @param ownerTradeFeeNumerator The owner trade fee numerator\n     * @param ownerTradeFeeDenominator The owner trade fee denominator\n     * @param ownerWithdrawFeeNumerator The owner withdraw fee numerator\n     * @param ownerWithdrawFeeDenominator The owner withdraw fee denominator\n     * @param hostFeeNumerator The host fee numerator\n     * @param hostFeeDenominator The host fee denominator\n     * @param curveType The curve type\n     * @param payer Pays for the transaction\n     */\n    constructor(connection, tokenSwap, swapProgramId, poolTokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, payer) {\n        this.connection = connection;\n        this.tokenSwap = tokenSwap;\n        this.swapProgramId = swapProgramId;\n        this.poolTokenProgramId = poolTokenProgramId;\n        this.poolToken = poolToken;\n        this.feeAccount = feeAccount;\n        this.authority = authority;\n        this.tokenAccountA = tokenAccountA;\n        this.tokenAccountB = tokenAccountB;\n        this.mintA = mintA;\n        this.mintB = mintB;\n        this.tradeFeeNumerator = tradeFeeNumerator;\n        this.tradeFeeDenominator = tradeFeeDenominator;\n        this.ownerTradeFeeNumerator = ownerTradeFeeNumerator;\n        this.ownerTradeFeeDenominator = ownerTradeFeeDenominator;\n        this.ownerWithdrawFeeNumerator = ownerWithdrawFeeNumerator;\n        this.ownerWithdrawFeeDenominator = ownerWithdrawFeeDenominator;\n        this.hostFeeNumerator = hostFeeNumerator;\n        this.hostFeeDenominator = hostFeeDenominator;\n        this.curveType = curveType;\n        this.payer = payer;\n        this.connection = connection;\n        this.tokenSwap = tokenSwap;\n        this.swapProgramId = swapProgramId;\n        this.poolTokenProgramId = poolTokenProgramId;\n        this.poolToken = poolToken;\n        this.feeAccount = feeAccount;\n        this.authority = authority;\n        this.tokenAccountA = tokenAccountA;\n        this.tokenAccountB = tokenAccountB;\n        this.mintA = mintA;\n        this.mintB = mintB;\n        this.tradeFeeNumerator = tradeFeeNumerator;\n        this.tradeFeeDenominator = tradeFeeDenominator;\n        this.ownerTradeFeeNumerator = ownerTradeFeeNumerator;\n        this.ownerTradeFeeDenominator = ownerTradeFeeDenominator;\n        this.ownerWithdrawFeeNumerator = ownerWithdrawFeeNumerator;\n        this.ownerWithdrawFeeDenominator = ownerWithdrawFeeDenominator;\n        this.hostFeeNumerator = hostFeeNumerator;\n        this.hostFeeDenominator = hostFeeDenominator;\n        this.curveType = curveType;\n        this.payer = payer;\n    }\n    /**\n     * Get the minimum balance for the token swap account to be rent exempt\n     *\n     * @return Number of lamports required\n     */\n    static async getMinBalanceRentForExemptTokenSwap(connection) {\n        return await connection.getMinimumBalanceForRentExemption(exports.TokenSwapLayout.span);\n    }\n    static createInitSwapInstruction(tokenSwapAccount, authority, tokenAccountA, tokenAccountB, tokenPool, feeAccount, tokenAccountPool, poolTokenProgramId, swapProgramId, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, curveParameters = new Numberu64(0)) {\n        const keys = [\n            { pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: tokenAccountA, isSigner: false, isWritable: false },\n            { pubkey: tokenAccountB, isSigner: false, isWritable: false },\n            { pubkey: tokenPool, isSigner: false, isWritable: true },\n            { pubkey: feeAccount, isSigner: false, isWritable: false },\n            { pubkey: tokenAccountPool, isSigner: false, isWritable: true },\n            { pubkey: poolTokenProgramId, isSigner: false, isWritable: false },\n        ];\n        const commandDataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            BufferLayout.nu64('tradeFeeNumerator'),\n            BufferLayout.nu64('tradeFeeDenominator'),\n            BufferLayout.nu64('ownerTradeFeeNumerator'),\n            BufferLayout.nu64('ownerTradeFeeDenominator'),\n            BufferLayout.nu64('ownerWithdrawFeeNumerator'),\n            BufferLayout.nu64('ownerWithdrawFeeDenominator'),\n            BufferLayout.nu64('hostFeeNumerator'),\n            BufferLayout.nu64('hostFeeDenominator'),\n            BufferLayout.u8('curveType'),\n            BufferLayout.blob(32, 'curveParameters'),\n        ]);\n        let data = buffer_1.Buffer.alloc(1024);\n        // package curve parameters\n        // NOTE: currently assume all curves take a single parameter, u64 int\n        //       the remaining 24 of the 32 bytes available are filled with 0s\n        let curveParamsBuffer = buffer_1.Buffer.alloc(32);\n        curveParameters.toBuffer().copy(curveParamsBuffer);\n        {\n            const encodeLength = commandDataLayout.encode({\n                instruction: 0,\n                tradeFeeNumerator,\n                tradeFeeDenominator,\n                ownerTradeFeeNumerator,\n                ownerTradeFeeDenominator,\n                ownerWithdrawFeeNumerator,\n                ownerWithdrawFeeDenominator,\n                hostFeeNumerator,\n                hostFeeDenominator,\n                curveType,\n                curveParameters: curveParamsBuffer,\n            }, data);\n            data = data.slice(0, encodeLength);\n        }\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: swapProgramId,\n            data,\n        });\n    }\n    static async loadTokenSwap(connection, address, programId, payer) {\n        const data = await (0, account_1.loadAccount)(connection, address, programId);\n        const tokenSwapData = exports.TokenSwapLayout.decode(data);\n        if (!tokenSwapData.isInitialized) {\n            throw new Error(`Invalid token swap state`);\n        }\n        const [authority] = await web3_js_1.PublicKey.findProgramAddress([address.toBuffer()], programId);\n        const poolToken = new web3_js_1.PublicKey(tokenSwapData.tokenPool);\n        const feeAccount = new web3_js_1.PublicKey(tokenSwapData.feeAccount);\n        const tokenAccountA = new web3_js_1.PublicKey(tokenSwapData.tokenAccountA);\n        const tokenAccountB = new web3_js_1.PublicKey(tokenSwapData.tokenAccountB);\n        const mintA = new web3_js_1.PublicKey(tokenSwapData.mintA);\n        const mintB = new web3_js_1.PublicKey(tokenSwapData.mintB);\n        const poolTokenProgramId = new web3_js_1.PublicKey(tokenSwapData.poolTokenProgramId);\n        const tradeFeeNumerator = Numberu64.fromBuffer(tokenSwapData.tradeFeeNumerator);\n        const tradeFeeDenominator = Numberu64.fromBuffer(tokenSwapData.tradeFeeDenominator);\n        const ownerTradeFeeNumerator = Numberu64.fromBuffer(tokenSwapData.ownerTradeFeeNumerator);\n        const ownerTradeFeeDenominator = Numberu64.fromBuffer(tokenSwapData.ownerTradeFeeDenominator);\n        const ownerWithdrawFeeNumerator = Numberu64.fromBuffer(tokenSwapData.ownerWithdrawFeeNumerator);\n        const ownerWithdrawFeeDenominator = Numberu64.fromBuffer(tokenSwapData.ownerWithdrawFeeDenominator);\n        const hostFeeNumerator = Numberu64.fromBuffer(tokenSwapData.hostFeeNumerator);\n        const hostFeeDenominator = Numberu64.fromBuffer(tokenSwapData.hostFeeDenominator);\n        const curveType = tokenSwapData.curveType;\n        return new TokenSwap(connection, address, programId, poolTokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, payer);\n    }\n    /**\n     * Create a new Token Swap\n     *\n     * @param connection The connection to use\n     * @param payer Pays for the transaction\n     * @param tokenSwapAccount The token swap account\n     * @param authority The authority over the swap and accounts\n     * @param tokenAccountA: The token swap's Token A account\n     * @param tokenAccountB: The token swap's Token B account\n     * @param poolToken The pool token\n     * @param tokenAccountPool The token swap's pool token account\n     * @param poolTokenProgramId The program ID of the token program for pool tokens\n     * @param swapProgramId The program ID of the token-swap program\n     * @param feeNumerator Numerator of the fee ratio\n     * @param feeDenominator Denominator of the fee ratio\n     * @return Token object for the newly minted token, Public key of the account holding the total supply of new tokens\n     */\n    static async createTokenSwap(connection, payer, tokenSwapAccount, authority, tokenAccountA, tokenAccountB, poolToken, mintA, mintB, feeAccount, tokenAccountPool, swapProgramId, poolTokenProgramId, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, curveParameters, confirmOptions) {\n        let transaction;\n        const tokenSwap = new TokenSwap(connection, tokenSwapAccount.publicKey, swapProgramId, poolTokenProgramId, poolToken, feeAccount, authority, tokenAccountA, tokenAccountB, mintA, mintB, new Numberu64(tradeFeeNumerator), new Numberu64(tradeFeeDenominator), new Numberu64(ownerTradeFeeNumerator), new Numberu64(ownerTradeFeeDenominator), new Numberu64(ownerWithdrawFeeNumerator), new Numberu64(ownerWithdrawFeeDenominator), new Numberu64(hostFeeNumerator), new Numberu64(hostFeeDenominator), curveType, payer);\n        // Allocate memory for the account\n        const balanceNeeded = await TokenSwap.getMinBalanceRentForExemptTokenSwap(connection);\n        transaction = new web3_js_1.Transaction();\n        transaction.add(web3_js_1.SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: tokenSwapAccount.publicKey,\n            lamports: balanceNeeded,\n            space: exports.TokenSwapLayout.span,\n            programId: swapProgramId,\n        }));\n        const instruction = TokenSwap.createInitSwapInstruction(tokenSwapAccount, authority, tokenAccountA, tokenAccountB, poolToken, feeAccount, tokenAccountPool, poolTokenProgramId, swapProgramId, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator, hostFeeNumerator, hostFeeDenominator, curveType, curveParameters);\n        transaction.add(instruction);\n        await (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, tokenSwapAccount], confirmOptions);\n        return tokenSwap;\n    }\n    /**\n     * Swap token A for token B\n     *\n     * @param userSource User's source token account\n     * @param poolSource Pool's source token account\n     * @param poolDestination Pool's destination token account\n     * @param userDestination User's destination token account\n     * @param sourceTokenProgramId Program id for the source token\n     * @param destinationTokenProgramId Program id for the destination token\n     * @param hostFeeAccount Host account to gather fees\n     * @param userTransferAuthority Account delegated to transfer user's tokens\n     * @param amountIn Amount to transfer from source account\n     * @param minimumAmountOut Minimum amount of tokens the user will receive\n     */\n    async swap(userSource, poolSource, poolDestination, userDestination, sourceTokenProgramId, destinationTokenProgramId, hostFeeAccount, userTransferAuthority, amountIn, minimumAmountOut, confirmOptions) {\n        return await (0, web3_js_1.sendAndConfirmTransaction)(this.connection, new web3_js_1.Transaction().add(TokenSwap.swapInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userSource, poolSource, poolDestination, userDestination, this.poolToken, this.feeAccount, hostFeeAccount, this.swapProgramId, sourceTokenProgramId, destinationTokenProgramId, this.poolTokenProgramId, amountIn, minimumAmountOut)), [this.payer, userTransferAuthority], confirmOptions);\n    }\n    static swapInstruction(tokenSwap, authority, userTransferAuthority, userSource, poolSource, poolDestination, userDestination, poolMint, feeAccount, hostFeeAccount, swapProgramId, sourceTokenProgramId, destinationTokenProgramId, poolTokenProgramId, amountIn, minimumAmountOut) {\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            Layout.uint64('amountIn'),\n            Layout.uint64('minimumAmountOut'),\n        ]);\n        const data = buffer_1.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 1,\n            amountIn: new Numberu64(amountIn).toBuffer(),\n            minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer(),\n        }, data);\n        const keys = [\n            { pubkey: tokenSwap, isSigner: false, isWritable: false },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n            { pubkey: userSource, isSigner: false, isWritable: true },\n            { pubkey: poolSource, isSigner: false, isWritable: true },\n            { pubkey: poolDestination, isSigner: false, isWritable: true },\n            { pubkey: userDestination, isSigner: false, isWritable: true },\n            { pubkey: poolMint, isSigner: false, isWritable: true },\n            { pubkey: feeAccount, isSigner: false, isWritable: true },\n            { pubkey: sourceTokenProgramId, isSigner: false, isWritable: false },\n            { pubkey: destinationTokenProgramId, isSigner: false, isWritable: false },\n            { pubkey: poolTokenProgramId, isSigner: false, isWritable: false },\n        ];\n        if (hostFeeAccount !== null) {\n            keys.push({ pubkey: hostFeeAccount, isSigner: false, isWritable: true });\n        }\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: swapProgramId,\n            data,\n        });\n    }\n    /**\n     * Deposit tokens into the pool\n     * @param userAccountA User account for token A\n     * @param userAccountB User account for token B\n     * @param poolAccount User account for pool token\n     * @param tokenProgramIdA Program id for token A\n     * @param tokenProgramIdB Program id for token B\n     * @param userTransferAuthority Account delegated to transfer user's tokens\n     * @param poolTokenAmount Amount of pool tokens to mint\n     * @param maximumTokenA The maximum amount of token A to deposit\n     * @param maximumTokenB The maximum amount of token B to deposit\n     */\n    async depositAllTokenTypes(userAccountA, userAccountB, poolAccount, tokenProgramIdA, tokenProgramIdB, userTransferAuthority, poolTokenAmount, maximumTokenA, maximumTokenB, confirmOptions) {\n        return await (0, web3_js_1.sendAndConfirmTransaction)(this.connection, new web3_js_1.Transaction().add(TokenSwap.depositAllTokenTypesInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userAccountA, userAccountB, this.tokenAccountA, this.tokenAccountB, this.poolToken, poolAccount, this.swapProgramId, tokenProgramIdA, tokenProgramIdB, this.poolTokenProgramId, poolTokenAmount, maximumTokenA, maximumTokenB)), [this.payer, userTransferAuthority], confirmOptions);\n    }\n    static depositAllTokenTypesInstruction(tokenSwap, authority, userTransferAuthority, sourceA, sourceB, intoA, intoB, poolToken, poolAccount, swapProgramId, tokenProgramIdA, tokenProgramIdB, poolTokenProgramId, poolTokenAmount, maximumTokenA, maximumTokenB) {\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            Layout.uint64('poolTokenAmount'),\n            Layout.uint64('maximumTokenA'),\n            Layout.uint64('maximumTokenB'),\n        ]);\n        const data = buffer_1.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 2,\n            poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n            maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n            maximumTokenB: new Numberu64(maximumTokenB).toBuffer(),\n        }, data);\n        const keys = [\n            { pubkey: tokenSwap, isSigner: false, isWritable: false },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n            { pubkey: sourceA, isSigner: false, isWritable: true },\n            { pubkey: sourceB, isSigner: false, isWritable: true },\n            { pubkey: intoA, isSigner: false, isWritable: true },\n            { pubkey: intoB, isSigner: false, isWritable: true },\n            { pubkey: poolToken, isSigner: false, isWritable: true },\n            { pubkey: poolAccount, isSigner: false, isWritable: true },\n            { pubkey: tokenProgramIdA, isSigner: false, isWritable: false },\n            { pubkey: tokenProgramIdB, isSigner: false, isWritable: false },\n            { pubkey: poolTokenProgramId, isSigner: false, isWritable: false },\n        ];\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: swapProgramId,\n            data,\n        });\n    }\n    /**\n     * Withdraw tokens from the pool\n     *\n     * @param userAccountA User account for token A\n     * @param userAccountB User account for token B\n     * @param poolAccount User account for pool token\n     * @param tokenProgramIdA Program id for token A\n     * @param tokenProgramIdB Program id for token B\n     * @param userTransferAuthority Account delegated to transfer user's tokens\n     * @param poolTokenAmount Amount of pool tokens to burn\n     * @param minimumTokenA The minimum amount of token A to withdraw\n     * @param minimumTokenB The minimum amount of token B to withdraw\n     */\n    async withdrawAllTokenTypes(userAccountA, userAccountB, poolAccount, tokenProgramIdA, tokenProgramIdB, userTransferAuthority, poolTokenAmount, minimumTokenA, minimumTokenB, confirmOptions) {\n        return await (0, web3_js_1.sendAndConfirmTransaction)(this.connection, new web3_js_1.Transaction().add(TokenSwap.withdrawAllTokenTypesInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, this.poolToken, this.feeAccount, poolAccount, this.tokenAccountA, this.tokenAccountB, userAccountA, userAccountB, this.swapProgramId, this.poolTokenProgramId, tokenProgramIdA, tokenProgramIdB, poolTokenAmount, minimumTokenA, minimumTokenB)), [this.payer, userTransferAuthority], confirmOptions);\n    }\n    static withdrawAllTokenTypesInstruction(tokenSwap, authority, userTransferAuthority, poolMint, feeAccount, sourcePoolAccount, fromA, fromB, userAccountA, userAccountB, swapProgramId, poolTokenProgramId, tokenProgramIdA, tokenProgramIdB, poolTokenAmount, minimumTokenA, minimumTokenB) {\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            Layout.uint64('poolTokenAmount'),\n            Layout.uint64('minimumTokenA'),\n            Layout.uint64('minimumTokenB'),\n        ]);\n        const data = buffer_1.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 3,\n            poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n            minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n            minimumTokenB: new Numberu64(minimumTokenB).toBuffer(),\n        }, data);\n        const keys = [\n            { pubkey: tokenSwap, isSigner: false, isWritable: false },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n            { pubkey: poolMint, isSigner: false, isWritable: true },\n            { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n            { pubkey: fromA, isSigner: false, isWritable: true },\n            { pubkey: fromB, isSigner: false, isWritable: true },\n            { pubkey: userAccountA, isSigner: false, isWritable: true },\n            { pubkey: userAccountB, isSigner: false, isWritable: true },\n            { pubkey: feeAccount, isSigner: false, isWritable: true },\n            { pubkey: poolTokenProgramId, isSigner: false, isWritable: false },\n            { pubkey: tokenProgramIdA, isSigner: false, isWritable: false },\n            { pubkey: tokenProgramIdB, isSigner: false, isWritable: false },\n        ];\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: swapProgramId,\n            data,\n        });\n    }\n    /**\n     * Deposit one side of tokens into the pool\n     * @param userAccount User account to deposit token A or B\n     * @param poolAccount User account to receive pool tokens\n     * @param sourceTokenProgramId Program id for the source token\n     * @param userTransferAuthority Account delegated to transfer user's tokens\n     * @param sourceTokenAmount The amount of token A or B to deposit\n     * @param minimumPoolTokenAmount Minimum amount of pool tokens to mint\n     */\n    async depositSingleTokenTypeExactAmountIn(userAccount, poolAccount, sourceTokenProgramId, userTransferAuthority, sourceTokenAmount, minimumPoolTokenAmount, confirmOptions) {\n        return await (0, web3_js_1.sendAndConfirmTransaction)(this.connection, new web3_js_1.Transaction().add(TokenSwap.depositSingleTokenTypeExactAmountInInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, userAccount, this.tokenAccountA, this.tokenAccountB, this.poolToken, poolAccount, this.swapProgramId, sourceTokenProgramId, this.poolTokenProgramId, sourceTokenAmount, minimumPoolTokenAmount)), [this.payer, userTransferAuthority], confirmOptions);\n    }\n    static depositSingleTokenTypeExactAmountInInstruction(tokenSwap, authority, userTransferAuthority, source, intoA, intoB, poolToken, poolAccount, swapProgramId, sourceTokenProgramId, poolTokenProgramId, sourceTokenAmount, minimumPoolTokenAmount) {\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            Layout.uint64('sourceTokenAmount'),\n            Layout.uint64('minimumPoolTokenAmount'),\n        ]);\n        const data = buffer_1.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 4,\n            sourceTokenAmount: new Numberu64(sourceTokenAmount).toBuffer(),\n            minimumPoolTokenAmount: new Numberu64(minimumPoolTokenAmount).toBuffer(),\n        }, data);\n        const keys = [\n            { pubkey: tokenSwap, isSigner: false, isWritable: false },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: intoA, isSigner: false, isWritable: true },\n            { pubkey: intoB, isSigner: false, isWritable: true },\n            { pubkey: poolToken, isSigner: false, isWritable: true },\n            { pubkey: poolAccount, isSigner: false, isWritable: true },\n            { pubkey: sourceTokenProgramId, isSigner: false, isWritable: false },\n            { pubkey: poolTokenProgramId, isSigner: false, isWritable: false },\n        ];\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: swapProgramId,\n            data,\n        });\n    }\n    /**\n     * Withdraw tokens from the pool\n     *\n     * @param userAccount User account to receive token A or B\n     * @param poolAccount User account to burn pool token\n     * @param destinationTokenProgramId Program id for the destination token\n     * @param userTransferAuthority Account delegated to transfer user's tokens\n     * @param destinationTokenAmount The amount of token A or B to withdraw\n     * @param maximumPoolTokenAmount Maximum amount of pool tokens to burn\n     */\n    async withdrawSingleTokenTypeExactAmountOut(userAccount, poolAccount, destinationTokenProgramId, userTransferAuthority, destinationTokenAmount, maximumPoolTokenAmount, confirmOptions) {\n        return await (0, web3_js_1.sendAndConfirmTransaction)(this.connection, new web3_js_1.Transaction().add(TokenSwap.withdrawSingleTokenTypeExactAmountOutInstruction(this.tokenSwap, this.authority, userTransferAuthority.publicKey, this.poolToken, this.feeAccount, poolAccount, this.tokenAccountA, this.tokenAccountB, userAccount, this.swapProgramId, this.poolTokenProgramId, destinationTokenProgramId, destinationTokenAmount, maximumPoolTokenAmount)), [this.payer, userTransferAuthority], confirmOptions);\n    }\n    static withdrawSingleTokenTypeExactAmountOutInstruction(tokenSwap, authority, userTransferAuthority, poolMint, feeAccount, sourcePoolAccount, fromA, fromB, userAccount, swapProgramId, poolTokenProgramId, destinationTokenProgramId, destinationTokenAmount, maximumPoolTokenAmount) {\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8('instruction'),\n            Layout.uint64('destinationTokenAmount'),\n            Layout.uint64('maximumPoolTokenAmount'),\n        ]);\n        const data = buffer_1.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 5,\n            destinationTokenAmount: new Numberu64(destinationTokenAmount).toBuffer(),\n            maximumPoolTokenAmount: new Numberu64(maximumPoolTokenAmount).toBuffer(),\n        }, data);\n        const keys = [\n            { pubkey: tokenSwap, isSigner: false, isWritable: false },\n            { pubkey: authority, isSigner: false, isWritable: false },\n            { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n            { pubkey: poolMint, isSigner: false, isWritable: true },\n            { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n            { pubkey: fromA, isSigner: false, isWritable: true },\n            { pubkey: fromB, isSigner: false, isWritable: true },\n            { pubkey: userAccount, isSigner: false, isWritable: true },\n            { pubkey: feeAccount, isSigner: false, isWritable: true },\n            { pubkey: poolTokenProgramId, isSigner: false, isWritable: false },\n            { pubkey: destinationTokenProgramId, isSigner: false, isWritable: false },\n        ];\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: swapProgramId,\n            data,\n        });\n    }\n}\nexports.TokenSwap = TokenSwap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}