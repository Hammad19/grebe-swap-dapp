{"ast":null,"code":"import { Account, clusterApiUrl, Connection, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo } from \"react\";\nconst sendTransaction = async function (connection, wallet, instructions, signers) {\n  let awaitConfirmation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (await connection.getRecentBlockhash(\"max\")).blockhash;\n  transaction.setSigners(\n  // fee payied by the wallet owner\n  wallet.publicKey, ...signers.map(s => s.publicKey));\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  transaction = await wallet.signTransaction(transaction);\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment: \"singleGossip\"\n  };\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  if (awaitConfirmation) {\n    const status = (await connection.confirmTransaction(txid, options && options.commitment)).value;\n    if (status.err) {\n      // TODO: notify\n      notify({\n        message: \"Transaction failed...\",\n        description: `${txid}`,\n        type: \"error\"\n      });\n      throw new Error(`Raw transaction ${txid} failed (${JSON.stringify(status)})`);\n    }\n  }\n  return txid;\n};","map":{"version":3,"names":["Account","clusterApiUrl","Connection","Transaction","TransactionInstruction","React","useContext","useEffect","useMemo","sendTransaction","connection","wallet","instructions","signers","awaitConfirmation","arguments","length","undefined","transaction","forEach","instruction","add","recentBlockhash","getRecentBlockhash","blockhash","setSigners","publicKey","map","s","partialSign","signTransaction","rawTransaction","serialize","options","skipPreflight","commitment","txid","sendRawTransaction","status","confirmTransaction","value","err","notify","message","description","type","Error","JSON","stringify"],"sources":["C:/Users/dell/OneDrive/Desktop/Mudex-Latest/mudex/src/utils/connection.js"],"sourcesContent":["import {\r\n  Account,\r\n  clusterApiUrl,\r\n  Connection,\r\n  Transaction,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\nimport React, { useContext, useEffect, useMemo } from \"react\";\r\n\r\nconst sendTransaction = async (\r\n  connection,\r\n  wallet,\r\n  instructions,\r\n  signers,\r\n  awaitConfirmation = true\r\n) => {\r\n  let transaction = new Transaction();\r\n  instructions.forEach((instruction) => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    await connection.getRecentBlockhash(\"max\")\r\n  ).blockhash;\r\n  transaction.setSigners(\r\n    // fee payied by the wallet owner\r\n    wallet.publicKey,\r\n    ...signers.map((s) => s.publicKey)\r\n  );\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  transaction = await wallet.signTransaction(transaction);\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment: \"singleGossip\",\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n\r\n  if (awaitConfirmation) {\r\n    const status = (\r\n      await connection.confirmTransaction(txid, options && options.commitment)\r\n    ).value;\r\n\r\n    if (status.err) {\r\n      // TODO: notify\r\n      notify({\r\n        message: \"Transaction failed...\",\r\n        description: `${txid}`,\r\n        type: \"error\",\r\n      });\r\n\r\n      throw new Error(\r\n        `Raw transaction ${txid} failed (${JSON.stringify(status)})`\r\n      );\r\n    }\r\n  }\r\n\r\n  return txid;\r\n};\r\n"],"mappings":"AAAA,SACEA,OAAO,EACPC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,sBAAsB,QACjB,iBAAiB;AACxB,OAAOC,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAE7D,MAAMC,eAAe,GAAG,eAAAA,CACtBC,UAAU,EACVC,MAAM,EACNC,YAAY,EACZC,OAAO,EAEJ;EAAA,IADHC,iBAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAExB,IAAIG,WAAW,GAAG,IAAIf,WAAW,EAAE;EACnCS,YAAY,CAACO,OAAO,CAAEC,WAAW,IAAKF,WAAW,CAACG,GAAG,CAACD,WAAW,CAAC,CAAC;EACnEF,WAAW,CAACI,eAAe,GAAG,CAC5B,MAAMZ,UAAU,CAACa,kBAAkB,CAAC,KAAK,CAAC,EAC1CC,SAAS;EACXN,WAAW,CAACO,UAAU;EACpB;EACAd,MAAM,CAACe,SAAS,EAChB,GAAGb,OAAO,CAACc,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACF,SAAS,CAAC,CACnC;EACD,IAAIb,OAAO,CAACG,MAAM,GAAG,CAAC,EAAE;IACtBE,WAAW,CAACW,WAAW,CAAC,GAAGhB,OAAO,CAAC;EACrC;EACAK,WAAW,GAAG,MAAMP,MAAM,CAACmB,eAAe,CAACZ,WAAW,CAAC;EACvD,MAAMa,cAAc,GAAGb,WAAW,CAACc,SAAS,EAAE;EAC9C,IAAIC,OAAO,GAAG;IACZC,aAAa,EAAE,IAAI;IACnBC,UAAU,EAAE;EACd,CAAC;EAED,MAAMC,IAAI,GAAG,MAAM1B,UAAU,CAAC2B,kBAAkB,CAACN,cAAc,EAAEE,OAAO,CAAC;EAEzE,IAAInB,iBAAiB,EAAE;IACrB,MAAMwB,MAAM,GAAG,CACb,MAAM5B,UAAU,CAAC6B,kBAAkB,CAACH,IAAI,EAAEH,OAAO,IAAIA,OAAO,CAACE,UAAU,CAAC,EACxEK,KAAK;IAEP,IAAIF,MAAM,CAACG,GAAG,EAAE;MACd;MACAC,MAAM,CAAC;QACLC,OAAO,EAAE,uBAAuB;QAChCC,WAAW,EAAG,GAAER,IAAK,EAAC;QACtBS,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,MAAM,IAAIC,KAAK,CACZ,mBAAkBV,IAAK,YAAWW,IAAI,CAACC,SAAS,CAACV,MAAM,CAAE,GAAE,CAC7D;IACH;EACF;EAEA,OAAOF,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}