{"ast":null,"code":"import { Numberu64 } from \"@solana/spl-token-swap\";\nimport { PublicKey, Account, TransactionInstruction } from \"@solana/web3.js\";\nimport * as BufferLayout from \"buffer-layout\";\nmodule.exports.TokenSwap = require(\"@solana/spl-token-swap\").TokenSwap;\n\n/**\r\n * Layout for a public key\r\n */\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"publicKey\";\n  return BufferLayout.blob(32, property);\n};\n\n/**\r\n * Layout for a 64bit unsigned value\r\n */\nconst uint64 = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"uint64\";\n  return BufferLayout.blob(8, property);\n};\nexport const TokenSwapLayoutLegacyV0 = BufferLayout.struct([BufferLayout.u8(\"isInitialized\"), BufferLayout.u8(\"nonce\"), publicKey(\"tokenAccountA\"), publicKey(\"tokenAccountB\"), publicKey(\"tokenPool\"), uint64(\"feesNumerator\"), uint64(\"feesDenominator\")]);\nexport const TokenSwapLayout = BufferLayout.struct([BufferLayout.u8(\"isInitialized\"), BufferLayout.u8(\"nonce\"), publicKey(\"tokenProgramId\"), publicKey(\"tokenAccountA\"), publicKey(\"tokenAccountB\"), publicKey(\"tokenPool\"), publicKey(\"mintA\"), publicKey(\"mintB\"), publicKey(\"feeAccount\"), BufferLayout.u8(\"curveType\"), uint64(\"tradeFeeNumerator\"), uint64(\"tradeFeeDenominator\"), uint64(\"ownerTradeFeeNumerator\"), uint64(\"ownerTradeFeeDenominator\"), uint64(\"ownerWithdrawFeeNumerator\"), uint64(\"ownerWithdrawFeeDenominator\"), BufferLayout.blob(16, \"padding\")]);\nexport const createInitSwapInstruction = (tokenSwapAccount, authority, tokenAccountA, tokenAccountB, tokenPool, feeAccount, tokenAccountPool, tokenProgramId, swapProgramId, nonce, curveType, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator) => {\n  const keys = [{\n    pubkey: tokenSwapAccount.publicKey,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: authority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: tokenAccountA,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: tokenAccountB,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: tokenPool,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: feeAccount,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: tokenAccountPool,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: tokenProgramId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const commandDataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\"), BufferLayout.u8(\"nonce\"), BufferLayout.u8(\"curveType\"), BufferLayout.nu64(\"tradeFeeNumerator\"), BufferLayout.nu64(\"tradeFeeDenominator\"), BufferLayout.nu64(\"ownerTradeFeeNumerator\"), BufferLayout.nu64(\"ownerTradeFeeDenominator\"), BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"), BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"), BufferLayout.blob(16, \"padding\")]);\n  let data = Buffer.alloc(1024);\n  {\n    const encodeLength = commandDataLayout.encode({\n      instruction: 0,\n      // InitializeSwap instruction\n      nonce,\n      curveType,\n      tradeFeeNumerator,\n      tradeFeeDenominator,\n      ownerTradeFeeNumerator,\n      ownerTradeFeeDenominator,\n      ownerWithdrawFeeNumerator,\n      ownerWithdrawFeeDenominator\n    }, data);\n    data = data.slice(0, encodeLength);\n  }\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data\n  });\n};\nexport function depositInstruction(tokenSwap, authority, sourceA, sourceB, intoA, intoB, poolToken, poolAccount, swapProgramId, tokenProgramId, poolTokenAmount, maximumTokenA, maximumTokenB) {\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\"), uint64(\"poolTokenAmount\"), uint64(\"maximumTokenA\"), uint64(\"maximumTokenB\")]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({\n    instruction: 2,\n    // Deposit instruction\n    poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n    maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n    maximumTokenB: new Numberu64(maximumTokenB).toBuffer()\n  }, data);\n  const keys = [{\n    pubkey: tokenSwap,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: authority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: sourceA,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: sourceB,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: intoA,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: intoB,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: poolToken,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: poolAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: tokenProgramId,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data\n  });\n}\nexport const withdrawInstruction = (tokenSwap, authority, poolMint, feeAccount, sourcePoolAccount, fromA, fromB, userAccountA, userAccountB, swapProgramId, tokenProgramId, poolTokenAmount, minimumTokenA, minimumTokenB) => {\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\"), uint64(\"poolTokenAmount\"), uint64(\"minimumTokenA\"), uint64(\"minimumTokenB\")]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({\n    instruction: 3,\n    // Withdraw instruction\n    poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n    minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n    minimumTokenB: new Numberu64(minimumTokenB).toBuffer()\n  }, data);\n  const keys = [{\n    pubkey: tokenSwap,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: authority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: poolMint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: sourcePoolAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: fromA,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: fromB,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: userAccountA,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: userAccountB,\n    isSigner: false,\n    isWritable: true\n  }];\n  if (feeAccount) {\n    keys.push({\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true\n    });\n  }\n  keys.push({\n    pubkey: tokenProgramId,\n    isSigner: false,\n    isWritable: false\n  });\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data\n  });\n};\nexport function swapInstruction(tokenSwap, authority, userSource, poolSource, poolDestination, userDestination, poolMint, feeAccount, swapProgramId, tokenProgramId, amountIn, minimumAmountOut, programOwner) {\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\"), uint64(\"amountIn\"), uint64(\"minimumAmountOut\")]);\n  const keys = [{\n    pubkey: tokenSwap,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: authority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: userSource,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: poolSource,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: poolDestination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: userDestination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: poolMint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: feeAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: tokenProgramId,\n    isSigner: false,\n    isWritable: false\n  }];\n\n  // optional depending on the build of token-swap program\n  if (programOwner) {\n    keys.push({\n      pubkey: programOwner,\n      isSigner: false,\n      isWritable: true\n    });\n  }\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({\n    instruction: 1,\n    // Swap instruction\n    amountIn: new uint64(amountIn).toBuffer(),\n    minimumAmountOut: new uint64(minimumAmountOut).toBuffer()\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data\n  });\n}","map":{"version":3,"names":["Numberu64","PublicKey","Account","TransactionInstruction","BufferLayout","module","exports","TokenSwap","require","publicKey","property","arguments","length","undefined","blob","uint64","TokenSwapLayoutLegacyV0","struct","u8","TokenSwapLayout","createInitSwapInstruction","tokenSwapAccount","authority","tokenAccountA","tokenAccountB","tokenPool","feeAccount","tokenAccountPool","tokenProgramId","swapProgramId","nonce","curveType","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","keys","pubkey","isSigner","isWritable","commandDataLayout","nu64","data","Buffer","alloc","encodeLength","encode","instruction","slice","programId","depositInstruction","tokenSwap","sourceA","sourceB","intoA","intoB","poolToken","poolAccount","poolTokenAmount","maximumTokenA","maximumTokenB","dataLayout","span","toBuffer","withdrawInstruction","poolMint","sourcePoolAccount","fromA","fromB","userAccountA","userAccountB","minimumTokenA","minimumTokenB","push","swapInstruction","userSource","poolSource","poolDestination","userDestination","amountIn","minimumAmountOut","programOwner"],"sources":["C:/Users/dell/OneDrive/Desktop/Mudex-Latest/mudex/src/components/Swap/tokenSwap.js"],"sourcesContent":["import { Numberu64 } from \"@solana/spl-token-swap\";\r\nimport {PublicKey, Account, TransactionInstruction} from \"@solana/web3.js\";\r\nimport * as BufferLayout from \"buffer-layout\";\r\n\r\nmodule.exports.TokenSwap = require(\"@solana/spl-token-swap\").TokenSwap;\r\n\r\n/**\r\n * Layout for a public key\r\n */\r\nconst publicKey = (property = \"publicKey\") => {\r\n    return BufferLayout.blob(32, property);\r\n};\r\n\r\n/**\r\n * Layout for a 64bit unsigned value\r\n */\r\nconst uint64 = (property = \"uint64\") => {\r\n    return BufferLayout.blob(8, property);\r\n};\r\n\r\nexport const TokenSwapLayoutLegacyV0 = BufferLayout.struct([\r\n    BufferLayout.u8(\"isInitialized\"),\r\n    BufferLayout.u8(\"nonce\"),\r\n    publicKey(\"tokenAccountA\"),\r\n    publicKey(\"tokenAccountB\"),\r\n    publicKey(\"tokenPool\"),\r\n    uint64(\"feesNumerator\"),\r\n    uint64(\"feesDenominator\"),\r\n]);\r\n\r\nexport const TokenSwapLayout = BufferLayout.struct([\r\n    BufferLayout.u8(\"isInitialized\"),\r\n    BufferLayout.u8(\"nonce\"),\r\n    publicKey(\"tokenProgramId\"),\r\n    publicKey(\"tokenAccountA\"),\r\n    publicKey(\"tokenAccountB\"),\r\n    publicKey(\"tokenPool\"),\r\n    publicKey(\"mintA\"),\r\n    publicKey(\"mintB\"),\r\n    publicKey(\"feeAccount\"),\r\n    BufferLayout.u8(\"curveType\"),\r\n    uint64(\"tradeFeeNumerator\"),\r\n    uint64(\"tradeFeeDenominator\"),\r\n    uint64(\"ownerTradeFeeNumerator\"),\r\n    uint64(\"ownerTradeFeeDenominator\"),\r\n    uint64(\"ownerWithdrawFeeNumerator\"),\r\n    uint64(\"ownerWithdrawFeeDenominator\"),\r\n    BufferLayout.blob(16, \"padding\"),\r\n]);\r\n\r\n\r\nexport const createInitSwapInstruction = (\r\n    tokenSwapAccount,\r\n    authority,\r\n    tokenAccountA,\r\n    tokenAccountB,\r\n    tokenPool,\r\n    feeAccount,\r\n    tokenAccountPool,\r\n    tokenProgramId,\r\n    swapProgramId,\r\n    nonce,\r\n    curveType,\r\n    tradeFeeNumerator,\r\n    tradeFeeDenominator,\r\n    ownerTradeFeeNumerator,\r\n    ownerTradeFeeDenominator,\r\n    ownerWithdrawFeeNumerator,\r\n    ownerWithdrawFeeDenominator\r\n) => {\r\n    const keys = [\r\n        {pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true},\r\n        {pubkey: authority, isSigner: false, isWritable: false},\r\n        {pubkey: tokenAccountA, isSigner: false, isWritable: false},\r\n        {pubkey: tokenAccountB, isSigner: false, isWritable: false},\r\n        {pubkey: tokenPool, isSigner: false, isWritable: true},\r\n        {pubkey: feeAccount, isSigner: false, isWritable: false},\r\n        {pubkey: tokenAccountPool, isSigner: false, isWritable: true},\r\n        {pubkey: tokenProgramId, isSigner: false, isWritable: false},\r\n    ];\r\n\r\n    const commandDataLayout = BufferLayout.struct([\r\n        BufferLayout.u8(\"instruction\"),\r\n        BufferLayout.u8(\"nonce\"),\r\n        BufferLayout.u8(\"curveType\"),\r\n        BufferLayout.nu64(\"tradeFeeNumerator\"),\r\n        BufferLayout.nu64(\"tradeFeeDenominator\"),\r\n        BufferLayout.nu64(\"ownerTradeFeeNumerator\"),\r\n        BufferLayout.nu64(\"ownerTradeFeeDenominator\"),\r\n        BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"),\r\n        BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"),\r\n        BufferLayout.blob(16, \"padding\"),\r\n    ]);\r\n    let data = Buffer.alloc(1024);\r\n    {\r\n        const encodeLength = commandDataLayout.encode(\r\n            {\r\n                instruction: 0, // InitializeSwap instruction\r\n                nonce,\r\n                curveType,\r\n                tradeFeeNumerator,\r\n                tradeFeeDenominator,\r\n                ownerTradeFeeNumerator,\r\n                ownerTradeFeeDenominator,\r\n                ownerWithdrawFeeNumerator,\r\n                ownerWithdrawFeeDenominator,\r\n            },\r\n            data\r\n        );\r\n        data = data.slice(0, encodeLength);\r\n    }\r\n    return new TransactionInstruction({\r\n        keys,\r\n        programId: swapProgramId,\r\n        data,\r\n    });\r\n};\r\n\r\n\r\nexport function depositInstruction(\r\n    tokenSwap,\r\n    authority,\r\n    sourceA,\r\n    sourceB,\r\n    intoA,\r\n    intoB,\r\n    poolToken,\r\n    poolAccount,\r\n    swapProgramId,\r\n    tokenProgramId,\r\n    poolTokenAmount,\r\n    maximumTokenA,\r\n    maximumTokenB\r\n) {\r\n    const dataLayout = BufferLayout.struct([\r\n        BufferLayout.u8(\"instruction\"),\r\n        uint64(\"poolTokenAmount\"),\r\n        uint64(\"maximumTokenA\"),\r\n        uint64(\"maximumTokenB\"),\r\n    ]);\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n        {\r\n            instruction: 2, // Deposit instruction\r\n            poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\r\n            maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\r\n            maximumTokenB: new Numberu64(maximumTokenB).toBuffer(),\r\n        },\r\n        data\r\n    );\r\n\r\n    const keys = [\r\n        {pubkey: tokenSwap, isSigner: false, isWritable: false},\r\n        {pubkey: authority, isSigner: false, isWritable: false},\r\n        {pubkey: sourceA, isSigner: false, isWritable: true},\r\n        {pubkey: sourceB, isSigner: false, isWritable: true},\r\n        {pubkey: intoA, isSigner: false, isWritable: true},\r\n        {pubkey: intoB, isSigner: false, isWritable: true},\r\n        {pubkey: poolToken, isSigner: false, isWritable: true},\r\n        {pubkey: poolAccount, isSigner: false, isWritable: true},\r\n        {pubkey: tokenProgramId, isSigner: false, isWritable: false},\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n        keys,\r\n        programId: swapProgramId,\r\n        data,\r\n    });\r\n}\r\n\r\nexport const withdrawInstruction = (\r\n  tokenSwap,\r\n  authority,\r\n  poolMint,\r\n  feeAccount,\r\n  sourcePoolAccount,\r\n  fromA,\r\n  fromB,\r\n  userAccountA,\r\n  userAccountB,\r\n  swapProgramId,\r\n  tokenProgramId,\r\n  poolTokenAmount,\r\n  minimumTokenA,\r\n  minimumTokenB\r\n) => {\r\n  const dataLayout = BufferLayout.struct([\r\n    BufferLayout.u8(\"instruction\"),\r\n    uint64(\"poolTokenAmount\"),\r\n    uint64(\"minimumTokenA\"),\r\n    uint64(\"minimumTokenB\"),\r\n  ]);\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      instruction: 3, // Withdraw instruction\r\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\r\n      minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\r\n      minimumTokenB: new Numberu64(minimumTokenB).toBuffer(),\r\n    },\r\n    data\r\n  );\r\n\r\n  const keys = [\r\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolMint, isSigner: false, isWritable: true },\r\n    { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\r\n    { pubkey: fromA, isSigner: false, isWritable: true },\r\n    { pubkey: fromB, isSigner: false, isWritable: true },\r\n    { pubkey: userAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userAccountB, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  if (feeAccount) {\r\n    keys.push({ pubkey: feeAccount, isSigner: false, isWritable: true });\r\n  }\r\n  keys.push({ pubkey: tokenProgramId, isSigner: false, isWritable: false });\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: swapProgramId,\r\n    data,\r\n  });\r\n};\r\n\r\nexport function swapInstruction(tokenSwap, authority, userSource, poolSource, poolDestination, userDestination, poolMint, feeAccount, swapProgramId, tokenProgramId, amountIn, minimumAmountOut, programOwner) {\r\n  const dataLayout = BufferLayout.struct([\r\n    BufferLayout.u8(\"instruction\"),\r\n    uint64(\"amountIn\"),\r\n    uint64(\"minimumAmountOut\"),\r\n  ]);\r\n\r\n  const keys = [\r\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: userSource, isSigner: false, isWritable: true },\r\n    { pubkey: poolSource, isSigner: false, isWritable: true },\r\n    { pubkey: poolDestination, isSigner: false, isWritable: true },\r\n    { pubkey: userDestination, isSigner: false, isWritable: true },\r\n    { pubkey: poolMint, isSigner: false, isWritable: true },\r\n    { pubkey: feeAccount, isSigner: false, isWritable: true },\r\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  // optional depending on the build of token-swap program\r\n  if (programOwner) {\r\n    keys.push({ pubkey: programOwner, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      instruction: 1, // Swap instruction\r\n      amountIn: new uint64(amountIn).toBuffer(),\r\n      minimumAmountOut: new uint64(minimumAmountOut).toBuffer(),\r\n    },\r\n    data\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: swapProgramId,\r\n    data,\r\n  });\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}