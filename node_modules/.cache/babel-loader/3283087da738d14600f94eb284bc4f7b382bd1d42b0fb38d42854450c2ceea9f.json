{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\OneDrive\\\\Desktop\\\\Mudex-Latest\\\\mudex\\\\src\\\\utils\\\\accounts.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$();\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useConnection } from \"./connection\";\nimport { useWallet } from \"./wallet\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { programIds, SWAP_HOST_FEE_ADDRESS, WRAPPED_SOL_MINT } from \"./ids\";\nimport { AccountLayout, MintLayout, u64 } from \"@solana/spl-token\";\nimport { notify } from \"./notifications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountsContext = /*#__PURE__*/React.createContext(null);\nclass AccountUpdateEvent extends Event {\n  constructor(id) {\n    super(AccountUpdateEvent.type);\n    this.id = id;\n  }\n}\nAccountUpdateEvent.type = \"AccountUpdate\";\nclass EventEmitter extends EventTarget {\n  raiseAccountUpdated(id) {\n    this.dispatchEvent(new AccountUpdateEvent(id));\n  }\n}\nconst accountEmitter = new EventEmitter();\nconst mintCache = new Map();\nconst pendingAccountCalls = new Map();\nconst accountsCache = new Map();\nconst getAccountInfo = async (connection, pubKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error(\"Failed to find mint account\");\n  }\n  const buffer = Buffer.from(info.data);\n  const data = deserializeAccount(buffer);\n  return {\n    pubkey: pubKey,\n    account: {\n      ...info\n    },\n    info: data\n  };\n};\nconst getMintInfo = async (connection, pubKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error(\"Failed to find mint account\");\n  }\n  const data = Buffer.from(info.data);\n  return deserializeMint(data);\n};\nexport const cache = {\n  getAccount: async (connection, pubKey) => {\n    let id;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n    const address = id.toBase58();\n    let account = accountsCache.get(address);\n    if (account) {\n      return account;\n    }\n    let query = pendingAccountCalls.get(address);\n    if (query) {\n      return query;\n    }\n    query = getAccountInfo(connection, id).then(data => {\n      pendingAccountCalls.delete(address);\n      accountsCache.set(address, data);\n      return data;\n    });\n    pendingAccountCalls.set(address, query);\n    return query;\n  },\n  getMint: async (connection, pubKey) => {\n    let id;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n    let mint = mintCache.get(id.toBase58());\n    if (mint) {\n      return mint;\n    }\n    let query = getMintInfo(connection, id);\n    mintCache.set(id.toBase58(), query);\n    return query;\n  }\n};\nexport const getCachedAccount = predicate => {\n  for (const account of accountsCache.values()) {\n    if (predicate(account)) {\n      return account;\n    }\n  }\n};\nfunction wrapNativeAccount(pubkey, account) {\n  if (!account) {\n    return undefined;\n  }\n  return {\n    pubkey: pubkey,\n    account: account,\n    info: {\n      mint: WRAPPED_SOL_MINT,\n      owner: pubkey,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null\n    }\n  };\n}\nconst UseNativeAccount = () => {\n  _s();\n  const connection = useConnection();\n  const {\n    wallet\n  } = useWallet();\n  const [nativeAccount, setNativeAccount] = useState();\n  useEffect(() => {\n    if (!connection || !(wallet !== null && wallet !== void 0 && wallet.publicKey)) {\n      return;\n    }\n    connection.getAccountInfo(wallet.publicKey).then(acc => {\n      if (acc) {\n        setNativeAccount(acc);\n      }\n    });\n    connection.onAccountChange(wallet.publicKey, acc => {\n      if (acc) {\n        setNativeAccount(acc);\n      }\n    });\n  }, [setNativeAccount, wallet, wallet.publicKey, connection]);\n  return {\n    nativeAccount\n  };\n};\n_s(UseNativeAccount, \"Yl6IJbk/jLIpgye+wZm/egPkpks=\", false, function () {\n  return [useConnection, useWallet];\n});\n_c = UseNativeAccount;\nconst PRECACHED_OWNERS = new Set();\nconst precacheUserTokenAccounts = async (connection, owner) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are update via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token\n  });\n  accounts.value.map(info => {\n    const data = deserializeAccount(info.account.data);\n    // need to query for mint to get decimals\n\n    // TODO: move to web3.js for decoding on the client side... maybe with callback\n    const details = {\n      pubkey: info.pubkey,\n      account: {\n        ...info.account\n      },\n      info: data\n    };\n    return details;\n  }).forEach(acc => {\n    accountsCache.set(acc.pubkey.toBase58(), acc);\n  });\n};\nfunction AccountsProvider(_ref) {\n  _s2();\n  let {\n    children = null\n  } = _ref;\n  const connection = useConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState([]);\n  const [userAccounts, setUserAccounts] = useState([]);\n  const {\n    nativeAccount\n  } = UseNativeAccount();\n  const {\n    pools\n  } = usePools();\n  const selectUserAccounts = useCallback(() => {\n    return [...accountsCache.values()].filter(a => a.info.owner.toBase58() === wallet.publicKey.toBase58());\n  }, [wallet]);\n  useEffect(() => {\n    setUserAccounts([wrapNativeAccount(wallet.publicKey, nativeAccount), ...tokenAccounts].filter(a => a !== undefined));\n  }, [nativeAccount, wallet, tokenAccounts]);\n  useEffect(() => {\n    if (!connection || !wallet || !wallet.publicKey) {\n      setTokenAccounts([]);\n    } else {\n      // cache host accounts to avoid query during swap\n      precacheUserTokenAccounts(connection, SWAP_HOST_FEE_ADDRESS);\n      precacheUserTokenAccounts(connection, wallet.publicKey).then(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter. discuss filter syntax\n      const tokenSubID = connection.onProgramAccountChange(programIds().token, info => {\n        // TODO: fix type in web3.js\n        const id = info.accountId;\n        // TODO: do we need a better way to identify layout (maybe an enum identifying type?)\n        if (info.accountInfo.data.length === AccountLayout.span) {\n          const data = deserializeAccount(info.accountInfo.data);\n          // TODO: move to web3.js for decoding on the client side... maybe with callback\n          const details = {\n            pubkey: new PublicKey(info.accountId),\n            account: {\n              ...info.accountInfo\n            },\n            info: data\n          };\n          if (PRECACHED_OWNERS.has(details.info.owner.toBase58()) || accountsCache.has(id)) {\n            accountsCache.set(id, details);\n            setTokenAccounts(selectUserAccounts());\n            accountEmitter.raiseAccountUpdated(id);\n          }\n        } else if (info.accountInfo.data.length === MintLayout.span) {\n          if (mintCache.has(id)) {\n            const data = Buffer.from(info.accountInfo.data);\n            const mint = deserializeMint(data);\n            mintCache.set(id, new Promise(resolve => resolve(mint)));\n            accountEmitter.raiseAccountUpdated(id);\n          }\n          accountEmitter.raiseAccountUpdated(id);\n        }\n      }, \"singleGossip\");\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n      };\n    }\n  }, [connection, connected, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey]);\n  return /*#__PURE__*/_jsxDEV(AccountsContext.Provider, {\n    value: {\n      userAccounts,\n      pools,\n      nativeAccount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 9\n  }, this);\n}\n_s2(AccountsProvider, \"WLMr7PIHhub4tzBrghGWADvqww4=\", true, function () {\n  return [useConnection, useWallet];\n});\n_c2 = AccountsProvider;\nfunction useNativeAccount() {\n  _s3();\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount\n  };\n}\n_s3(useNativeAccount, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction useMint(id) {\n  _s4();\n  const connection = useConnection();\n  const [mint, setMint] = useState();\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    cache.getMint(connection, id).then(setMint).catch(err => notify({\n      message: err.message,\n      type: \"error\"\n    }));\n    const onAccountEvent = e => {\n      if (e.id === id) {\n        cache.getMint(connection, id).then(setMint);\n      }\n    };\n    accountEmitter.addEventListener(AccountUpdateEvent.type, onAccountEvent);\n    return () => {\n      accountEmitter.removeEventListener(AccountUpdateEvent.type, onAccountEvent);\n    };\n  }, [connection, id]);\n  return mint;\n}\n_s4(useMint, \"/CLPph+bq3vWsAHzlMV9EjOrpgE=\", false, function () {\n  return [useConnection];\n});\nfunction useUserAccounts() {\n  _s5();\n  const context = useContext(AccountsContext);\n  return {\n    userAccounts: context.userAccounts\n  };\n}\n_s5(useUserAccounts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction useAccount(pubKey) {\n  _s6();\n  const connection = useConnection();\n  const [account, setAccount] = useState();\n  const key = pubKey ? pubKey.toBase58() : undefined;\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n        const acc = await cache.getAccount(connection, key).catch(err => notify({\n          message: err.message,\n          type: \"error\"\n        }));\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    query();\n    const onAccountEvent = e => {\n      if (e.id === key) {\n        query();\n      }\n    };\n    accountEmitter.addEventListener(AccountUpdateEvent.type, onAccountEvent);\n    return () => {\n      accountEmitter.removeEventListener(AccountUpdateEvent.type, onAccountEvent);\n    };\n  }, [connection, key]);\n  return account;\n}\n_s6(useAccount, \"HSyiSFcaOPcHMh5tpuogKXQKciU=\", false, function () {\n  return [useConnection];\n});\nfunction useCachedPool() {\n  _s7();\n  const context = useContext(AccountsContext);\n  return {\n    pools: context.pools\n  };\n}\n_s7(useCachedPool, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst useSelectedAccount = account => {\n  _s8();\n  const {\n    userAccounts\n  } = useUserAccounts();\n  const index = userAccounts.findIndex(acc => acc.pubkey.toBase58() === account);\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n};\n_s8(useSelectedAccount, \"AXyOBHRxQADxPlME1n8bLf7kOQk=\", false, function () {\n  return [useUserAccounts];\n});\nconst useAccountByMint = mint => {\n  _s9();\n  const {\n    userAccounts\n  } = useUserAccounts();\n  const index = userAccounts.findIndex(acc => acc.info.mint.toBase58() === mint);\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n};\n\n// TODO: expose in spl package\n_s9(useAccountByMint, \"AXyOBHRxQADxPlME1n8bLf7kOQk=\", false, function () {\n  return [useUserAccounts];\n});\nconst deserializeAccount = data => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n  return accountInfo;\n};\nconst deserializeMint = data => {\n  if (data.length !== MintLayout.span) {\n    throw new Error(\"Not a valid Mint\");\n  }\n  const mintInfo = MintLayout.decode(data);\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n  return mintInfo;\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"UseNativeAccount\");\n$RefreshReg$(_c2, \"AccountsProvider\");","map":{"version":3,"names":["React","useCallback","useContext","useEffect","useState","useConnection","useWallet","PublicKey","programIds","SWAP_HOST_FEE_ADDRESS","WRAPPED_SOL_MINT","AccountLayout","MintLayout","u64","notify","jsxDEV","_jsxDEV","AccountsContext","createContext","AccountUpdateEvent","Event","constructor","id","type","EventEmitter","EventTarget","raiseAccountUpdated","dispatchEvent","accountEmitter","mintCache","Map","pendingAccountCalls","accountsCache","getAccountInfo","connection","pubKey","info","Error","buffer","Buffer","from","data","deserializeAccount","pubkey","account","getMintInfo","deserializeMint","cache","getAccount","address","toBase58","get","query","then","delete","set","getMint","mint","getCachedAccount","predicate","values","wrapNativeAccount","undefined","owner","amount","lamports","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","UseNativeAccount","_s","wallet","nativeAccount","setNativeAccount","publicKey","acc","onAccountChange","_c","PRECACHED_OWNERS","Set","precacheUserTokenAccounts","add","accounts","getTokenAccountsByOwner","programId","token","value","map","details","forEach","AccountsProvider","_ref","_s2","children","connected","tokenAccounts","setTokenAccounts","userAccounts","setUserAccounts","pools","usePools","selectUserAccounts","filter","a","tokenSubID","onProgramAccountChange","accountId","accountInfo","length","span","has","Promise","resolve","removeProgramAccountChangeListener","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c2","useNativeAccount","_s3","context","useMint","_s4","setMint","catch","err","message","onAccountEvent","e","addEventListener","removeEventListener","useUserAccounts","_s5","useAccount","_s6","setAccount","key","console","error","useCachedPool","_s7","useSelectedAccount","_s8","index","findIndex","useAccountByMint","_s9","decode","fromBuffer","delegateOption","state","isNativeOption","closeAuthorityOption","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority","$RefreshReg$"],"sources":["C:/Users/dell/OneDrive/Desktop/Mudex-Latest/mudex/src/utils/accounts.js"],"sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from \"react\";\r\nimport {useConnection} from \"./connection\";\r\nimport {useWallet} from \"./wallet\";\r\nimport {PublicKey} from \"@solana/web3.js\";\r\nimport {programIds, SWAP_HOST_FEE_ADDRESS, WRAPPED_SOL_MINT} from \"./ids\";\r\nimport {AccountLayout, MintLayout, u64} from \"@solana/spl-token\";\r\nimport {notify} from \"./notifications\";\r\n\r\n\r\nconst AccountsContext = React.createContext(null);\r\n\r\nclass AccountUpdateEvent extends Event {\r\n    static type = \"AccountUpdate\";\r\n\r\n    constructor(id) {\r\n        super(AccountUpdateEvent.type);\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass EventEmitter extends EventTarget {\r\n    raiseAccountUpdated(id) {\r\n        this.dispatchEvent(new AccountUpdateEvent(id));\r\n    }\r\n}\r\n\r\nconst accountEmitter = new EventEmitter();\r\n\r\nconst mintCache = new Map();\r\nconst pendingAccountCalls = new Map();\r\nconst accountsCache = new Map();\r\n\r\n\r\nconst getAccountInfo = async (connection, pubKey) => {\r\n    const info = await connection.getAccountInfo(pubKey);\r\n    if (info === null) {\r\n        throw new Error(\"Failed to find mint account\");\r\n    }\r\n\r\n    const buffer = Buffer.from(info.data);\r\n\r\n    const data = deserializeAccount(buffer);\r\n\r\n    return {\r\n        pubkey: pubKey,\r\n        account: {\r\n            ...info,\r\n        },\r\n        info: data,\r\n    };\r\n};\r\n\r\nconst getMintInfo = async (connection, pubKey) => {\r\n    const info = await connection.getAccountInfo(pubKey);\r\n    if (info === null) {\r\n        throw new Error(\"Failed to find mint account\");\r\n    }\r\n\r\n    const data = Buffer.from(info.data);\r\n\r\n    return deserializeMint(data);\r\n};\r\n\r\nexport const cache = {\r\n    getAccount: async (connection, pubKey) => {\r\n        let id;\r\n        if (typeof pubKey === \"string\") {\r\n            id = new PublicKey(pubKey);\r\n        } else {\r\n            id = pubKey;\r\n        }\r\n\r\n        const address = id.toBase58();\r\n\r\n        let account = accountsCache.get(address);\r\n        if (account) {\r\n            return account;\r\n        }\r\n\r\n        let query = pendingAccountCalls.get(address);\r\n        if (query) {\r\n            return query;\r\n        }\r\n\r\n        query = getAccountInfo(connection, id).then((data) => {\r\n            pendingAccountCalls.delete(address);\r\n            accountsCache.set(address, data);\r\n            return data;\r\n        });\r\n        pendingAccountCalls.set(address, query);\r\n\r\n        return query;\r\n    },\r\n    getMint: async (connection, pubKey) => {\r\n        let id;\r\n        if (typeof pubKey === \"string\") {\r\n            id = new PublicKey(pubKey);\r\n        } else {\r\n            id = pubKey;\r\n        }\r\n\r\n        let mint = mintCache.get(id.toBase58());\r\n        if (mint) {\r\n            return mint;\r\n        }\r\n\r\n        let query = getMintInfo(connection, id);\r\n\r\n        mintCache.set(id.toBase58(), query);\r\n\r\n        return query;\r\n    },\r\n};\r\n\r\nexport const getCachedAccount = (predicate) => {\r\n    for (const account of accountsCache.values()) {\r\n        if (predicate(account)) {\r\n            return account;\r\n        }\r\n    }\r\n};\r\n\r\nfunction wrapNativeAccount(pubkey, account) {\r\n    if (!account) {\r\n        return undefined;\r\n    }\r\n\r\n    return {\r\n        pubkey: pubkey,\r\n        account: account,\r\n        info: {\r\n            mint: WRAPPED_SOL_MINT,\r\n            owner: pubkey,\r\n            amount: new u64(account.lamports),\r\n            delegate: null,\r\n            delegatedAmount: new u64(0),\r\n            isInitialized: true,\r\n            isFrozen: false,\r\n            isNative: true,\r\n            rentExemptReserve: null,\r\n            closeAuthority: null,\r\n        },\r\n    };\r\n}\r\n\r\nconst UseNativeAccount = () => {\r\n    const connection = useConnection();\r\n    const {wallet} = useWallet();\r\n\r\n    const [nativeAccount, setNativeAccount] = useState();\r\n    useEffect(() => {\r\n        if (!connection || !wallet?.publicKey) {\r\n            return;\r\n        }\r\n\r\n        connection.getAccountInfo(wallet.publicKey).then((acc) => {\r\n            if (acc) {\r\n                setNativeAccount(acc);\r\n            }\r\n        });\r\n        connection.onAccountChange(wallet.publicKey, (acc) => {\r\n            if (acc) {\r\n                setNativeAccount(acc);\r\n            }\r\n        });\r\n    }, [setNativeAccount, wallet, wallet.publicKey, connection]);\r\n\r\n    return {nativeAccount};\r\n};\r\n\r\nconst PRECACHED_OWNERS = new Set();\r\nconst precacheUserTokenAccounts = async (connection, owner) => {\r\n    if (!owner) {\r\n        return;\r\n    }\r\n\r\n    // used for filtering account updates over websocket\r\n    PRECACHED_OWNERS.add(owner.toBase58());\r\n\r\n    // user accounts are update via ws subscription\r\n    const accounts = await connection.getTokenAccountsByOwner(owner, {\r\n        programId: programIds().token,\r\n    });\r\n    accounts.value\r\n        .map((info) => {\r\n            const data = deserializeAccount(info.account.data);\r\n            // need to query for mint to get decimals\r\n\r\n            // TODO: move to web3.js for decoding on the client side... maybe with callback\r\n            const details = {\r\n                pubkey: info.pubkey,\r\n                account: {\r\n                    ...info.account,\r\n                },\r\n                info: data,\r\n            };\r\n\r\n            return details;\r\n        })\r\n        .forEach((acc) => {\r\n            accountsCache.set(acc.pubkey.toBase58(), acc);\r\n        });\r\n};\r\n\r\nfunction AccountsProvider({children = null}) {\r\n    const connection = useConnection();\r\n    const {wallet, connected} = useWallet();\r\n    const [tokenAccounts, setTokenAccounts] = useState([]);\r\n    const [userAccounts, setUserAccounts] = useState([]);\r\n    const {nativeAccount} = UseNativeAccount();\r\n    const {pools} = usePools();\r\n\r\n    const selectUserAccounts = useCallback(() => {\r\n        return [...accountsCache.values()].filter(\r\n            (a) => a.info.owner.toBase58() === wallet.publicKey.toBase58()\r\n        );\r\n    }, [wallet]);\r\n\r\n    useEffect(() => {\r\n        setUserAccounts(\r\n            [\r\n                wrapNativeAccount(wallet.publicKey, nativeAccount),\r\n                ...tokenAccounts,\r\n            ].filter((a) => a !== undefined)\r\n        );\r\n    }, [nativeAccount, wallet, tokenAccounts]);\r\n\r\n    useEffect(() => {\r\n        if (!connection || !wallet || !wallet.publicKey) {\r\n            setTokenAccounts([]);\r\n        } else {\r\n            // cache host accounts to avoid query during swap\r\n            precacheUserTokenAccounts(connection, SWAP_HOST_FEE_ADDRESS);\r\n\r\n            precacheUserTokenAccounts(connection, wallet.publicKey).then(() => {\r\n                setTokenAccounts(selectUserAccounts());\r\n            });\r\n\r\n            // This can return different types of accounts: token-account, mint, multisig\r\n            // TODO: web3.js expose ability to filter. discuss filter syntax\r\n            const tokenSubID = connection.onProgramAccountChange(\r\n                programIds().token,\r\n                (info) => {\r\n                    // TODO: fix type in web3.js\r\n                    const id = info.accountId;\r\n                    // TODO: do we need a better way to identify layout (maybe an enum identifying type?)\r\n                    if (info.accountInfo.data.length === AccountLayout.span) {\r\n                        const data = deserializeAccount(info.accountInfo.data);\r\n                        // TODO: move to web3.js for decoding on the client side... maybe with callback\r\n                        const details = {\r\n                            pubkey: new PublicKey(info.accountId),\r\n                            account: {\r\n                                ...info.accountInfo,\r\n                            },\r\n                            info: data,\r\n                        };\r\n\r\n                        if (\r\n                            PRECACHED_OWNERS.has(details.info.owner.toBase58()) ||\r\n                            accountsCache.has(id)\r\n                        ) {\r\n                            accountsCache.set(id, details);\r\n                            setTokenAccounts(selectUserAccounts());\r\n                            accountEmitter.raiseAccountUpdated(id);\r\n                        }\r\n                    } else if (info.accountInfo.data.length === MintLayout.span) {\r\n                        if (mintCache.has(id)) {\r\n                            const data = Buffer.from(info.accountInfo.data);\r\n                            const mint = deserializeMint(data);\r\n                            mintCache.set(id, new Promise((resolve) => resolve(mint)));\r\n                            accountEmitter.raiseAccountUpdated(id);\r\n                        }\r\n\r\n                        accountEmitter.raiseAccountUpdated(id);\r\n                    }\r\n                },\r\n                \"singleGossip\"\r\n            );\r\n\r\n            return () => {\r\n                connection.removeProgramAccountChangeListener(tokenSubID);\r\n            };\r\n        }\r\n    }, [connection, connected, wallet?.publicKey]);\r\n\r\n    return (\r\n        <AccountsContext.Provider\r\n            value={{\r\n                userAccounts,\r\n                pools,\r\n                nativeAccount,\r\n            }}\r\n        >\r\n            {children}\r\n        </AccountsContext.Provider>\r\n    );\r\n}\r\n\r\nfunction useNativeAccount() {\r\n  const context = useContext(AccountsContext);\r\n  return {\r\n    account: context.nativeAccount,\r\n  };\r\n}\r\n\r\nfunction useMint(id) {\r\n  const connection = useConnection();\r\n  const [mint, setMint] = useState();\r\n\r\n  useEffect(() => {\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    cache\r\n      .getMint(connection, id)\r\n      .then(setMint)\r\n      .catch((err) =>\r\n        notify({\r\n          message: err.message,\r\n          type: \"error\",\r\n        })\r\n      );\r\n    const onAccountEvent = (e) => {\r\n        if (e.id === id) {\r\n        cache.getMint(connection, id).then(setMint);\r\n      }\r\n    };\r\n\r\n    accountEmitter.addEventListener(AccountUpdateEvent.type, onAccountEvent);\r\n    return () => {\r\n      accountEmitter.removeEventListener(\r\n        AccountUpdateEvent.type,\r\n        onAccountEvent\r\n      );\r\n    };\r\n  }, [connection, id]);\r\n\r\n  return mint;\r\n}\r\n\r\nfunction useUserAccounts() {\r\n  const context = useContext(AccountsContext);\r\n  return {\r\n    userAccounts: context.userAccounts,\r\n  };\r\n}\r\n\r\nfunction useAccount(pubKey) {\r\n  const connection = useConnection();\r\n  const [account, setAccount] = useState();\r\n\r\n  const key = pubKey ? pubKey.toBase58() : undefined;\r\n\r\n  useEffect(() => {\r\n    const query = async () => {\r\n      try {\r\n        if (!key) {\r\n          return;\r\n        }\r\n\r\n        const acc = await cache.getAccount(connection, key).catch((err) =>\r\n          notify({\r\n            message: err.message,\r\n            type: \"error\",\r\n          })\r\n        );\r\n        if (acc) {\r\n          setAccount(acc);\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    query();\r\n\r\n    const onAccountEvent = (e) => {\r\n        if (e.id === key) {\r\n        query();\r\n      }\r\n    };\r\n\r\n    accountEmitter.addEventListener(AccountUpdateEvent.type, onAccountEvent);\r\n    return () => {\r\n      accountEmitter.removeEventListener(\r\n        AccountUpdateEvent.type,\r\n        onAccountEvent\r\n      );\r\n    };\r\n  }, [connection, key]);\r\n\r\n  return account;\r\n}\r\n\r\nfunction useCachedPool() {\r\n  const context = useContext(AccountsContext);\r\n  return {\r\n    pools: context.pools,\r\n  };\r\n}\r\n\r\nconst useSelectedAccount = (account) => {\r\n  const { userAccounts } = useUserAccounts();\r\n  const index = userAccounts.findIndex(\r\n    (acc) => acc.pubkey.toBase58() === account\r\n  );\r\n\r\n  if (index !== -1) {\r\n    return userAccounts[index];\r\n  }\r\n\r\n};\r\n\r\nconst useAccountByMint = (mint) => {\r\n  const { userAccounts } = useUserAccounts();\r\n  const index = userAccounts.findIndex(\r\n    (acc) => acc.info.mint.toBase58() === mint\r\n  );\r\n\r\n  if (index !== -1) {\r\n    return userAccounts[index];\r\n  }\r\n\r\n};\r\n\r\n// TODO: expose in spl package\r\nconst deserializeAccount = (data) => {\r\n  const accountInfo = AccountLayout.decode(data);\r\n  accountInfo.mint = new PublicKey(accountInfo.mint);\r\n  accountInfo.owner = new PublicKey(accountInfo.owner);\r\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\r\n\r\n  if (accountInfo.delegateOption === 0) {\r\n    accountInfo.delegate = null;\r\n    accountInfo.delegatedAmount = new u64(0);\r\n  } else {\r\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\r\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\r\n  }\r\n\r\n  accountInfo.isInitialized = accountInfo.state !== 0;\r\n  accountInfo.isFrozen = accountInfo.state === 2;\r\n\r\n  if (accountInfo.isNativeOption === 1) {\r\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\r\n    accountInfo.isNative = true;\r\n  } else {\r\n    accountInfo.rentExemptReserve = null;\r\n    accountInfo.isNative = false;\r\n  }\r\n\r\n  if (accountInfo.closeAuthorityOption === 0) {\r\n    accountInfo.closeAuthority = null;\r\n  } else {\r\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\r\n  }\r\n\r\n  return accountInfo;\r\n};\r\n\r\nconst deserializeMint = (data) => {\r\n  if (data.length !== MintLayout.span) {\r\n    throw new Error(\"Not a valid Mint\");\r\n  }\r\n\r\n  const mintInfo = MintLayout.decode(data);\r\n\r\n  if (mintInfo.mintAuthorityOption === 0) {\r\n    mintInfo.mintAuthority = null;\r\n  } else {\r\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\r\n  }\r\n\r\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\r\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\r\n\r\n  if (mintInfo.freezeAuthorityOption === 0) {\r\n    mintInfo.freezeAuthority = null;\r\n  } else {\r\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\r\n  }\r\n\r\n  return mintInfo;\r\n};\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}